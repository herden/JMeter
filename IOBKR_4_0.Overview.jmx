<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="IoTest-01 (id: 8092577)" enabled="true">
      <stringProp name="TestPlan.comments">This test plan was created by the BlazeMeter converter v.2.3.17. Please contact support@blazemeter.com for further support.</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BASE_URL_1" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_1</stringProp>
            <stringProp name="Argument.value">myid-dev.bakerhughes.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_2" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_2</stringProp>
            <stringProp name="Argument.value">bkr-qa-inventoryplanning.np-c3qa.npause1.bakerhughes.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BASE_URL_1" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_1</stringProp>
            <stringProp name="Argument.value">myid-dev.bakerhughes.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_2" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_2</stringProp>
            <stringProp name="Argument.value">bkr-qa-inventoryplanning.np-c3qa.npause1.bakerhughes.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_3" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_3</stringProp>
            <stringProp name="Argument.value">ok3static.oktacdn.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_4" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_4</stringProp>
            <stringProp name="Argument.value">login.okta.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_5" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_5</stringProp>
            <stringProp name="Argument.value">bh-qa-inventoryplanning.c3iot.ai</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_6" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_6</stringProp>
            <stringProp name="Argument.value">www.google-analytics.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_7" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_7</stringProp>
            <stringProp name="Argument.value">maps.googleapis.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_8" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_8</stringProp>
            <stringProp name="Argument.value">fonts.googleapis.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="username" elementType="Argument">
            <stringProp name="Argument.name">username</stringProp>
            <stringProp name="Argument.value">212606910</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">Med55usas</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="endTimeZ" elementType="Argument">
            <stringProp name="Argument.name">endTimeZ</stringProp>
            <stringProp name="Argument.value">&quot;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.sssXXX)}&quot;</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ssX)}</stringProp>
          </elementProp>
          <elementProp name="InDays" elementType="Argument">
            <stringProp name="Argument.name">InDays</stringProp>
            <stringProp name="Argument.value">89</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Site" elementType="Argument">
            <stringProp name="Argument.name">Site</stringProp>
            <stringProp name="Argument.value">&quot;exists(idName)&quot;</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">&quot;intersects(facility.name, [\&quot;6180-Shannon\&quot;])&quot;</stringProp>
          </elementProp>
          <elementProp name="Site6180" elementType="Argument">
            <stringProp name="Argument.name">Site6180</stringProp>
            <stringProp name="Argument.value">&quot;1 == 1&quot;</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">&quot;exists(idName)&quot;</stringProp>
          </elementProp>
          <elementProp name="InYear" elementType="Argument">
            <stringProp name="Argument.name">InYear</stringProp>
            <stringProp name="Argument.value">731</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">366</stringProp>
          </elementProp>
          <elementProp name="tier123" elementType="Argument">
            <stringProp name="Argument.name">tier123</stringProp>
            <stringProp name="Argument.value">&quot;intersects(productHierarchyInventoryParams.productTiersMapping.tier2Description, [\&quot;${Tier2_PATH}\&quot;])&quot;</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tier2Description222" elementType="Argument">
            <stringProp name="Argument.name">tier2Description222</stringProp>
            <stringProp name="Argument.value">intersects(productHierarchyInventoryParams.productTiersMapping.tier2Description, [\&quot;${Tier2_PATH}\&quot;]) </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tier1Description111" elementType="Argument">
            <stringProp name="Argument.name">tier1Description111</stringProp>
            <stringProp name="Argument.value">&amp;&amp; intersects(productHierarchyInventoryParams.productTiersMapping.tier1Description, [\&quot;${Tier1_PATH}\&quot;])</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tier3Description333" elementType="Argument">
            <stringProp name="Argument.name">tier3Description333</stringProp>
            <stringProp name="Argument.value">&amp;&amp; intersects(productHierarchyInventoryParams.productTiersMapping.tier3Description, [\&quot;${Tier3_PATH}\&quot;])</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mrpType" elementType="Argument">
            <stringProp name="Argument.name">mrpType</stringProp>
            <stringProp name="Argument.value">&amp;&amp; intersects(mrpType.name, [\&quot;${MRPType_PATH}\&quot;]) </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="facility" elementType="Argument">
            <stringProp name="Argument.name">facility</stringProp>
            <stringProp name="Argument.value">&amp;&amp; intersects(facility.name, [\&quot;${Facility_PATH}\&quot;]) </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="env" elementType="Argument">
            <stringProp name="Argument.name">env</stringProp>
            <stringProp name="Argument.value">bh-qa-inventoryplanning.c3iot.ai</stringProp>
            <stringProp name="Argument.desc">bh-predev-inventoryplanning-prime.c3iot.ai</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="endTimeNextMonth" elementType="Argument">
            <stringProp name="Argument.name">endTimeNextMonth</stringProp>
            <stringProp name="Argument.value">&quot;${__time(yyyy-MM-&apos;01T00:00:00.000&apos;XXX)}&quot;</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="startInMonth" elementType="Argument">
            <stringProp name="Argument.name">startInMonth</stringProp>
            <stringProp name="Argument.value">3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="endInMonth" elementType="Argument">
            <stringProp name="Argument.name">endInMonth</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="bulk" elementType="Argument">
            <stringProp name="Argument.name">bulk</stringProp>
            <stringProp name="Argument.value">[\\\&quot;true\\\&quot;]</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="nonBulk" elementType="Argument">
            <stringProp name="Argument.name">nonBulk</stringProp>
            <stringProp name="Argument.value">[\\\&quot;false\\\&quot;]</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="bulkNonBulk" elementType="Argument">
            <stringProp name="Argument.name">bulkNonBulk</stringProp>
            <stringProp name="Argument.value">[\\\&quot;true\\\&quot;, \\\&quot;false\\\&quot;]</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="6180" elementType="Argument">
            <stringProp name="Argument.name">6180</stringProp>
            <stringProp name="Argument.value">[\\\&quot;6180-Shannon\\\&quot;]</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="facilityItems" elementType="Argument">
            <stringProp name="Argument.name">facilityItems</stringProp>
            <stringProp name="Argument.value">[\\\&quot;6180-Shannon\\\&quot;]&quot;, &quot;[\\\&quot;1830-Billerica FGM\\\&quot;]&quot;,&quot;[\\\&quot;1600-Twinsburg\\\&quot;]&quot;,&quot;[\\\&quot;6210-Groby\\\&quot;]&quot;,&quot;[\\\&quot;7110-Changzhou\\\&quot;]</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="typeMRPItems" elementType="Argument">
            <stringProp name="Argument.name">typeMRPItems</stringProp>
            <stringProp name="Argument.value">[\\\&quot;PD\\\&quot;]&quot;, &quot;[\\\&quot;VB\\\&quot;]&quot;,&quot;[\\\&quot;Z1\\\&quot;]&quot;,&quot;[\\\&quot;Z2\\\&quot;]&quot;,&quot;[\\\&quot;PD\\\&quot;, \\\&quot;Z1\\\&quot;, \\\&quot;Z2\\\&quot;]&quot;,&quot;[\\\&quot;Z1\\\&quot;, \\\&quot;Z2\\\&quot;]</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DAY" elementType="Argument">
            <stringProp name="Argument.name">DAY</stringProp>
            <stringProp name="Argument.value">DAY</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MONTH" elementType="Argument">
            <stringProp name="Argument.name">MONTH</stringProp>
            <stringProp name="Argument.value">MONTH</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="YEAR" elementType="Argument">
            <stringProp name="Argument.name">YEAR</stringProp>
            <stringProp name="Argument.value">YEAR</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="makeBuyItems" elementType="Argument">
            <stringProp name="Argument.name">makeBuyItems</stringProp>
            <stringProp name="Argument.value">[\\\&quot;BOTH\\\&quot;]&quot;,&quot;[\\\&quot;MAKE\\\&quot;]&quot;, &quot;[\\\&quot;BUY\\\&quot;]&quot;,&quot;[\\\&quot;MAKE\\\&quot;, \\\&quot;BUY\\\&quot;]&quot;,&quot;[\\\&quot;MAKE\\\&quot;, \\\&quot;BUY\\\&quot;, \\\&quot;BOTH\\\&quot;]</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="classABC" elementType="Argument">
            <stringProp name="Argument.name">classABC</stringProp>
            <stringProp name="Argument.value">[\\\&quot;A\\\&quot;]&quot;, &quot;[\\\&quot;B\\\&quot;]&quot;,&quot;[\\\&quot;C\\\&quot;]&quot;,&quot;[\\\&quot;A\\\&quot;, \\\&quot;B\\\&quot;]&quot;,&quot;[\\\&quot;B\\\&quot;, \\\&quot;C\\\&quot;]&quot;,&quot;[\\\&quot;A\\\&quot;, \\\&quot;C\\\&quot;]</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="replenishType" elementType="Argument">
            <stringProp name="Argument.name">replenishType</stringProp>
            <stringProp name="Argument.value">[\\\&quot;SAFETY_STOCK\\\&quot;]&quot;, &quot;[\\\&quot;REORDER_POINT\\\&quot;]&quot;,&quot;[\\\&quot;SAFETY_STOCK\\\&quot;, \\\&quot;REORDER_POINT\\\&quot;]</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list"/>
      </AuthManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <stringProp name="CookieManager.policy">standard-strict</stringProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">true</boolProp>
      </CacheManager>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>true</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="bzm - Concurrency Thread Group" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">10</stringProp>
        <stringProp name="RampUp">5</stringProp>
        <stringProp name="Steps">10</stringProp>
        <stringProp name="Hold">5</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Login_BKR_QA" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserHome" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">app/UserHome</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.proxyHost">PITC-Zscaler-Americas-Alpharetta3PR.proxy.corporate.ge.com</stringProp>
            <stringProp name="HTTPSampler.proxyPort">80</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">0.0</stringProp>
              <stringProp name="ConstantTimer.delay">0</stringProp>
              <stringProp name="TestPlan.comments">Recorded time was 0 milliseconds</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="auth/services/devicefingerprint" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">auth/services/devicefingerprint</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.proxyHost">PITC-Zscaler-Americas-Alpharetta3PR.proxy.corporate.ge.com</stringProp>
            <stringProp name="HTTPSampler.proxyPort">80</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="internal/device/nonce" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1/internal/device/nonce</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.proxyHost">PITC-Zscaler-Americas-Alpharetta3PR.proxy.corporate.ge.com</stringProp>
            <stringProp name="HTTPSampler.proxyPort">80</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="authn" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;password&quot;:&quot;${password}&quot;,&quot;username&quot;:&quot;${username}&quot;,&quot;options&quot;:{&quot;warnBeforePasswordExpired&quot;:true,&quot;multiOptionalFactorEnroll&quot;:true}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1/authn</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.proxyHost">PITC-Zscaler-Americas-Alpharetta3PR.proxy.corporate.ge.com</stringProp>
            <stringProp name="HTTPSampler.proxyPort">80</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-Okta-User-Agent-Extended" elementType="Header">
                  <stringProp name="Header.name">X-Okta-User-Agent-Extended</stringProp>
                  <stringProp name="Header.value">okta-signin-widget-2.21.0</stringProp>
                </elementProp>
                <elementProp name="X-Okta-XsrfToken" elementType="Header">
                  <stringProp name="Header.name">X-Okta-XsrfToken</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="X-Device-Fingerprint" elementType="Header">
                  <stringProp name="Header.name">X-Device-Fingerprint</stringProp>
                  <stringProp name="Header.value">xMVLZoXos2ycCyh2yAFEgPsS4m-vgNAR|e9feb7c47437b97c5488f281f242ff0bcc29c41c397f65d10319b03b6f4fa9c9|071b10bed4f46d3bcfb889e2781fd052</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">dynamic_token</stringProp>
              <stringProp name="RegexExtractor.regex">sessionToken&quot;:&quot;(\w.*)&quot;,&quot;_embedded</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">11000</stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="login/sessionCookieRedirect?checkAccountSetupComplete" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="redirectUrl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">redirectUrl</stringProp>
                  <stringProp name="Argument.value">https://myid-dev.bakerhughes.com/app/UserHome</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="checkAccountSetupComplete" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">checkAccountSetupComplete</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">token</stringProp>
                  <stringProp name="Argument.value">${dynamic_token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">login/sessionCookieRedirect</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.proxyHost">PITC-Zscaler-Americas-Alpharetta3PR.proxy.corporate.ge.com</stringProp>
            <stringProp name="HTTPSampler.proxyPort">80</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">8123.0</stringProp>
              <stringProp name="ConstantTimer.delay">4061.5</stringProp>
              <stringProp name="TestPlan.comments">Recorded time was 8123 milliseconds</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://myid-dev.bakerhughes.com/app/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">app/UserHome</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.proxyHost">PITC-Zscaler-Americas-Alpharetta3PR.proxy.corporate.ge.com</stringProp>
            <stringProp name="HTTPSampler.proxyPort">80</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="X-Okta-XsrfToken" elementType="Header">
                  <stringProp name="Header.name">X-Okta-XsrfToken</stringProp>
                  <stringProp name="Header.value">20c9dd768cf5b58ba5082e9e38bf48c030d1eb439b60e03320067f1548919ccf</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="user-notifications" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/internal/v1/user-notifications</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.proxyHost">PITC-Zscaler-Americas-Alpharetta3PR.proxy.corporate.ge.com</stringProp>
            <stringProp name="HTTPSampler.proxyPort">80</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="X-Okta-XsrfToken" elementType="Header">
                  <stringProp name="Header.name">X-Okta-XsrfToken</stringProp>
                  <stringProp name="Header.value">20c9dd768cf5b58ba5082e9e38bf48c030d1eb439b60e03320067f1548919ccf</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="internal/enduser/home" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/internal/enduser/home</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.proxyHost">PITC-Zscaler-Americas-Alpharetta3PR.proxy.corporate.ge.com</stringProp>
            <stringProp name="HTTPSampler.proxyPort">80</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="X-Okta-XsrfToken" elementType="Header">
                  <stringProp name="Header.name">X-Okta-XsrfToken</stringProp>
                  <stringProp name="Header.value">20c9dd768cf5b58ba5082e9e38bf48c030d1eb439b60e03320067f1548919ccf</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="users/me/home/tabs?type=all&amp;expand=items%2Citems.resource" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="expand" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">expand</stringProp>
                  <stringProp name="Argument.value">items,items.resource</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">type</stringProp>
                  <stringProp name="Argument.value">all</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v1/users/me/home/tabs</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.proxyHost">PITC-Zscaler-Americas-Alpharetta3PR.proxy.corporate.ge.com</stringProp>
            <stringProp name="HTTPSampler.proxyPort">80</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="X-Okta-XsrfToken" elementType="Header">
                  <stringProp name="Header.name">X-Okta-XsrfToken</stringProp>
                  <stringProp name="Header.value">20c9dd768cf5b58ba5082e9e38bf48c030d1eb439b60e03320067f1548919ccf</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="internal/user-message" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/internal/user-message</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.proxyHost">PITC-Zscaler-Americas-Alpharetta3PR.proxy.corporate.ge.com</stringProp>
            <stringProp name="HTTPSampler.proxyPort">80</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="X-Okta-XsrfToken" elementType="Header">
                  <stringProp name="Header.name">X-Okta-XsrfToken</stringProp>
                  <stringProp name="Header.value">20c9dd768cf5b58ba5082e9e38bf48c030d1eb439b60e03320067f1548919ccf</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="myiddev_bhc3aiiopreproduction_1/exkrdg0piqjXmMcgy0h7/sso/saml" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromHome" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromHome</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">app/myiddev_bhc3aiiopreproduction_1/exkrdg0piqjXmMcgy0h7/sso/saml</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.proxyHost">PITC-Zscaler-Americas-Alpharetta3PR.proxy.corporate.ge.com</stringProp>
            <stringProp name="HTTPSampler.proxyPort">80</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">c3tenant=bkrinventoryplanning; c3tag=prod; c3canonical=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">10996.0</stringProp>
              <stringProp name="ConstantTimer.delay">5498</stringProp>
              <stringProp name="TestPlan.comments">Recorded time was 10996 milliseconds</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SAMLResponse_token</stringProp>
              <stringProp name="RegexExtractor.regex">value=\&quot;(P\w.*);&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">12000</stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Get_New_SAMLResponse_token" enabled="true">
            <stringProp name="BeanShellSampler.query">String path =vars.get(&quot;SAMLResponse_token&quot;);
String path_replaced01 = path.replaceAll(&quot;&amp;#x2b;&quot;, &quot;+&quot;);
String path_replaced02 = path_replaced01.replaceAll(&quot;&amp;#x3d;&quot;, &quot;&quot;);
String path_replaced03 = path_replaced02.replaceAll(&quot;&amp;#x3d&quot;, &quot;&quot;);
String path_replaced = path_replaced03.replaceAll(&quot;&amp;#x2b&quot;, &quot;&quot;);
vars.put(&quot;New_SAMLResponse_token&quot;, path_replaced);
//System.out.println(&quot;ResData=&quot;+path_replaced);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="auth/1/loginDelegate" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="SAMLResponse" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">SAMLResponse</stringProp>
                  <stringProp name="Argument.value">${New_SAMLResponse_token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="RelayState" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">RelayState</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/auth/1/loginDelegate</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.proxyScheme">proxyHostproxy-src.research.ge.com</stringProp>
            <stringProp name="HTTPSampler.proxyPort">80</stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">navigate</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://myid-dev.bakerhughes.com/app/myiddev_bhc3aiiopreproduction_1/exkrdg0piqjXmMcgy0h7/sso/saml</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-GB,en-US;q=0.9,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://myid-dev.bakerhughes.com</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">document</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">c3tenant=bkrinventoryplanning; c3tag=prod; c3canonical=false</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">bkr-qa-inventoryplanning.np-c3qa.npause1.bakerhughes.com</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">User-agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authority</stringProp>
                  <stringProp name="Header.value">bkr-qa-inventoryplanning.np-c3qa.npause1.bakerhughes.com</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">1000</stringProp>
              <stringProp name="ConstantTimer.delay">2000</stringProp>
              <stringProp name="TestPlan.comments">Recorded time was 0 milliseconds</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
              <intProp name="OnError.action">4</intProp>
            </ResultAction>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Navigate" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="inventoryPlanning" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">inventoryPlanning</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://c3energy.okta.com</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">document</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">667.0</stringProp>
              <stringProp name="ConstantTimer.delay">333.5</stringProp>
              <stringProp name="TestPlan.comments">Recorded time was 667 milliseconds</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="api/1/UIMetadata?action=init" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/1/UIMetadata?action=init</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-C3-Type-Aware" elementType="Header">
                  <stringProp name="Header.name">X-C3-Type-Aware</stringProp>
                  <stringProp name="Header.value">typesOnly,js</stringProp>
                </elementProp>
                <elementProp name="X-Stream" elementType="Header">
                  <stringProp name="Header.name">X-Stream</stringProp>
                  <stringProp name="Header.value">false</stringProp>
                </elementProp>
                <elementProp name="Content-type" elementType="Header">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="X-C3-Language" elementType="Header">
                  <stringProp name="Header.name">X-C3-Language</stringProp>
                  <stringProp name="Header.value">en-US</stringProp>
                </elementProp>
                <elementProp name="X-Envelope" elementType="Header">
                  <stringProp name="Header.name">X-Envelope</stringProp>
                  <stringProp name="Header.value">false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="auth/1/token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">auth/1/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Content-type" elementType="Header">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="api/1/bhinventoryplanning/prime/UiRoute?action=fetch" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/1/bkrinventoryplanning/prod/UiRoute?action=fetch</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="c3server" elementType="Header">
                  <stringProp name="Header.name">c3server</stringProp>
                  <stringProp name="Header.value">https://bh-predev-iodemo-prime.c3iot.ai</stringProp>
                </elementProp>
                <elementProp name="Content-type" elementType="Header">
                  <stringProp name="Header.name">Content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="X-C3-Language" elementType="Header">
                  <stringProp name="Header.name">X-C3-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="X-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-Request-Id</stringProp>
                  <stringProp name="Header.value">548879756</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://bh-qa-inventoryplanning.c3iot.ai</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Navigated to Overview page" enabled="true"/>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">2</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tier1" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;projection&quot;:&quot;unique(tier1Description)&quot;,&quot;order&quot;:&quot;ascending(tier1Description)&quot;,&quot;filter&quot;:&quot;exists(tier1Description)&quot;,&quot;limit&quot;:500}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/1/ProductTiersMapping?action=evaluate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Content-type" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor1" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">Tier1_PATH</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;str&quot;\s:\s.(.*)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1926298066">DIGITAL SOLUTIONS</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
                <intProp name="OnError.action">1</intProp>
              </ResultAction>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tier2" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;projection&quot;:&quot;unique(tier2Description)&quot;,&quot;order&quot;:&quot;ascending(tier2Description)&quot;,&quot;filter&quot;:&quot;intersects(tier1Description, [\&quot;${Tier1_PATH}\&quot;])&quot;,&quot;limit&quot;:500}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/1/ProductTiersMapping?action=evaluate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Content-type" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor2" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">Tier2_PATH</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;str&quot;\s:\s.(.*)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tier3" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;projection&quot;:&quot;unique(tier3Description)&quot;,&quot;order&quot;:&quot;ascending(tier3Description)&quot;,&quot;filter&quot;:&quot;intersects(tier2Description, [\&quot;${Tier2_PATH}\&quot;])&quot;,&quot;limit&quot;:500}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/1/ProductTiersMapping?action=evaluate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Content-type" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor3" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">Tier3_PATH</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;str&quot;\s:\s.(.*)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Facility" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;projection&quot;:&quot;unique(name)&quot;,&quot;order&quot;:&quot;ascending(name)&quot;,&quot;filter&quot;:&quot;exists(name) &amp;&amp; facilityType == &apos;MANUFACTURING_FACILITY&apos;&quot;,&quot;limit&quot;:500}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/1/Facility?action=evaluate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Content-type" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor4" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">Facility_PATH1</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;str&quot;\s:\s.(.*)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">exists(idName)</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor4" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">Facility_PATH2</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;str&quot;\s:\s.(.*)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">exists(idName)</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ItemFacilityGroup" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;projection&quot;:&quot;unique(id)&quot;,&quot;order&quot;:&quot;ascending(id)&quot;,&quot;filter&quot;:&quot;exists(id)&quot;,&quot;limit&quot;:500}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/1/ItemFacilityGroup?action=evaluate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Content-type" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor5" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">FacilityGroup_PATH</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;str&quot;\s:\s.(.*)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MRPType" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;projection&quot;:&quot;unique(name)&quot;,&quot;order&quot;:&quot;ascending(name)&quot;,&quot;filter&quot;:&quot;exists(name)&quot;,&quot;limit&quot;:500}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/1/MRPType?action=evaluate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Content-type" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor6" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">MRPType_PATH</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;str&quot;\s:\s.(.*)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ItemStatus" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;projection&quot;:&quot;unique(name)&quot;,&quot;order&quot;:&quot;ascending(name)&quot;,&quot;filter&quot;:&quot;exists(name)&quot;,&quot;limit&quot;:500}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/1/ItemStatus?action=evaluate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Content-type" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MRPControllerUser?action=evaluate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;projection&quot;:&quot;unique(idName)&quot;,&quot;order&quot;:&quot;ascending(idName)&quot;,&quot;filter&quot;:&quot;exists(idName)&quot;,&quot;limit&quot;:500}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/1/MRPControllerUser?action=evaluate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Content-type" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PurchasingGroup?action=evaluate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;projection&quot;:&quot;unique(nameDescription)&quot;,&quot;order&quot;:&quot;ascending(nameDescription)&quot;,&quot;filter&quot;:&quot;exists(nameDescription)&quot;,&quot;limit&quot;:500}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/1/PurchasingGroup?action=evaluate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Content-type" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="***ReplenishmentMethod_NOT_for_SS_ROP" enabled="false">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">function getReplenishMethod() {
var serviceClassStart = (Math.round(Math.random() * 2 + 1));
var quickReplenish
if (serviceClassStart == 1 ){
	var sAFETY_STOCK = &quot;intersects(replenishmentMethod, [\\\&quot;SAFETY_STOCK\\&quot;+&quot;\&quot;])&quot;;
   quickReplenish = sAFETY_STOCK;
	} 
else if (serviceClassStart==2){
	var rEORDER_POINT = &quot;intersects(replenishmentMethod, [\\\&quot;REORDER_POINT\\&quot;+&quot;\&quot;])&quot;;
   quickReplenish = rEORDER_POINT;
	} 
else{
	 quickReplenish = &quot;intersects(replenishmentMethod, [\\\&quot;SAFETY_STOCK\\&quot;+&quot;\&quot;, \\\&quot;REORDER_POINT\\&quot;+&quot;\&quot;])&quot;;
	}
  {
  return quickReplenish;
}
}


var screenPage= vars.get(&quot;screen&quot;);
var extraString11 = &apos;facility == \\&quot;\\&quot; &amp;&amp; itemFacilityInventoryDerivedParams.serviceClassVarianceGrouping == \\&quot;\\&quot; &amp;&amp; itemFacilityGroups.from == \\&quot;\\&quot;&apos;;

if (screenPage == &quot;UIOverviewFacilitiesGrid&quot;)
	vars.put(&quot;FilterOption&quot;, getReplenishMethod());
	vars.put(&quot;FilterOptionParts&quot;, &apos;facility == \\&quot;\\&quot; &amp;&amp; &apos;+getReplenishMethod()+&apos; &amp;&amp; itemFacilityInventoryDerivedParams.serviceClassVarianceGrouping == \\&quot;\\&quot; &amp;&amp; itemFacilityGroups.from == \\&quot;\\&quot;&apos;);
	} 
else if (screenPage == &quot;recomm&quot;){
	vars.put(&quot;FilterOption&quot;, &quot;NOT FOUND&quot;);
	}  
else{
	vars.put(&quot;FilterOption&quot;, getReplenishMethod());
	}</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
              <boolProp name="com.blazemeter.jmeter.debugger.engine.Debugger">false</boolProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="***Tier1_2_3" enabled="false">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">
vars.put(&quot;FilterOption&quot;, 
	vars.get(&quot;tier2Description11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;tier1Description11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;tier3Description11&quot;));
	
vars.put(&quot;FilterOptionParts&quot;, 
	vars.get(&quot;tier2Description11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;tier1Description11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;extraString11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;tier3Description11&quot;));
	
vars.put(&quot;FilterOptionRecomm&quot;, 
	vars.get(&quot;tier2Description11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;latestRecomm&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;tier1Description11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;replenishmentString11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;tier3Description11&quot;));
	
vars.put(&quot;FilterOptionROP&quot;, 
	vars.get(&quot;tier2Description11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;latestRecomm&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;tier1Description11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;replenishmentString11ROP&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;tier3Description11&quot;));
	
vars.put(&quot;FilterOptionReport&quot;, 
	vars.get(&quot;tier2Description11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;tier1Description11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;tier3Description11&quot;));
	
vars.put(&quot;FilterOptionReportConfigHistory&quot;, 
	vars.get(&quot;tier3Description11&quot;).replace(&quot;productHierarchyInventoryParams&quot;,&quot;parent.productHierarchyInventoryParams&quot;)+&quot; &amp;&amp; &quot;+
	vars.get(&quot;tier2Description11&quot;).replace(&quot;productHierarchyInventoryParams&quot;,&quot;parent.productHierarchyInventoryParams&quot;)+&quot; &amp;&amp; &quot;+
	vars.get(&quot;tier1Description11&quot;).replace(&quot;productHierarchyInventoryParams&quot;,&quot;parent.productHierarchyInventoryParams&quot;));
	
	</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
              <boolProp name="com.blazemeter.jmeter.debugger.engine.Debugger">true</boolProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="***Tier1_2" enabled="false">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">var tier2Description1= vars.get(&quot;Tier2_PATH&quot;);
var tier2Description11 = &quot;intersects(productHierarchyInventoryParams.productTiersMapping.tier2Description, [\\\&quot;&quot;+tier2Description1+&quot;\\&quot;+&quot;\&quot;])&quot;;

var tier1Description1= vars.get(&quot;Tier1_PATH&quot;);
var tier1Description11 = &quot;intersects(productHierarchyInventoryParams.productTiersMapping.tier1Description, [\\\&quot;&quot;+tier1Description1+&quot;\\&quot;+&quot;\&quot;])&quot;;

var tier3Description1= vars.get(&quot;Tier3_PATH&quot;);
var tier3Description11 = &quot;intersects(productHierarchyInventoryParams.productTiersMapping.tier3Description, [\\\&quot;&quot;+tier3Description1+&quot;\\&quot;+&quot;\&quot;])&quot;;

var extraString11 = &apos;facility == \\&quot;\\&quot; &amp;&amp; itemFacilityInventoryDerivedParams.serviceClassVarianceGrouping == \\&quot;\\&quot; &amp;&amp; itemFacilityGroups.from == \\&quot;\\&quot;&apos;;
var replenishmentString11 = &apos;replenishmentMethod == \\&quot;SAFETY_STOCK\\&quot; &amp;&amp; itemFacilityInventoryDerivedParams.replenishmentType == \\&quot;SAFETY_STOCK\\&quot; &amp;&amp; inSnoozedState == false&apos;;
var replenishmentString11ROP = &apos;replenishmentMethod == \\&quot;REORDER_POINT\\&quot; &amp;&amp; itemFacilityInventoryDerivedParams.replenishmentType == \\&quot;REORDER_POINT\\&quot; &amp;&amp; inSnoozedState == false&apos;;
var latestRecomm = &apos;latestRecommendation.status == \\&quot;New\\&quot;&apos;;

var screenPage= vars.get(&quot;screen&quot;);

if (screenPage == &quot;UIOverviewFacilitiesGrid&quot;){
	vars.put(&quot;FilterOption&quot;, tier2Description11+&quot; &amp;&amp; &quot;+tier1Description11+&quot; &amp;&amp; &quot;+ tier3Description11);
	vars.put(&quot;FilterOptionParts&quot;, tier2Description11+&quot; &amp;&amp; &quot;+tier1Description11+&quot; &amp;&amp; &quot;+extraString11+&quot; &amp;&amp; &quot;+ tier3Description11);
	} 
else if (screenPage == &quot;recomm&quot;){
	vars.put(&quot;FilterOption&quot;, tier2Description11+&quot; &amp;&amp; &quot;+latestRecomm+&quot; &amp;&amp; &quot;+ tier1Description11+&quot; &amp;&amp; &quot;+ replenishmentString11);
	vars.put(&quot;FilterOptionROP&quot;, tier2Description11+&quot; &amp;&amp; &quot;+latestRecomm+&quot; &amp;&amp; &quot;+ tier1Description11+&quot; &amp;&amp; &quot;+ replenishmentString11ROP);
	vars.put(&quot;FilterOptionReport&quot;,  tier2Description11+&quot; &amp;&amp; &quot;+tier1Description11);
	vars.put(&quot;FilterOptionReportConfigHistory&quot;,  tier2Description11.replace(&quot;productHierarchyInventoryParams&quot;,&quot;parent.productHierarchyInventoryParams&quot;)+&quot; &amp;&amp; &quot;+tier1Description11.replace(&quot;productHierarchyInventoryParams&quot;,&quot;parent.productHierarchyInventoryParams&quot;));
	}  
else{
	vars.put(&quot;FilterOption&quot;, tier2Description11+&quot; &amp;&amp; &quot;+tier1Description11);
	}</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
              <boolProp name="com.blazemeter.jmeter.debugger.engine.Debugger">true</boolProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="***Tier1_2_ServiceClass" enabled="false">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">function randomInteger(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

var serviceClassStart = (Math.round(Math.random() * 5 + 1));
var serviceClassEnd = randomInteger(serviceClassStart, 6);

var serviceClass11= &quot;(itemFacilityInventoryDerivedParams.serviceClass &gt;= &quot;+serviceClassStart+&quot; &amp;&amp; itemFacilityInventoryDerivedParams.serviceClass &lt;= &quot;+serviceClassEnd+&quot;)&quot;;


var tier2Description1= vars.get(&quot;Tier2_PATH&quot;);
var tier2Description11 = &quot;intersects(productHierarchyInventoryParams.productTiersMapping.tier2Description, [\\\&quot;&quot;+tier2Description1+&quot;\\&quot;+&quot;\&quot;])&quot;;

var tier1Description1= vars.get(&quot;Tier1_PATH&quot;);
var tier1Description11 = &quot;intersects(productHierarchyInventoryParams.productTiersMapping.tier1Description, [\\\&quot;&quot;+tier1Description1+&quot;\\&quot;+&quot;\&quot;])&quot;;

var extraString11 = &apos;facility == \\&quot;\\&quot; &amp;&amp; itemFacilityInventoryDerivedParams.serviceClassVarianceGrouping == \\&quot;\\&quot; &amp;&amp; itemFacilityGroups.from == \\&quot;\\&quot;&apos;;
var replenishmentString11 = &apos;replenishmentMethod == \\&quot;SAFETY_STOCK\\&quot; &amp;&amp; itemFacilityInventoryDerivedParams.replenishmentType == \\&quot;SAFETY_STOCK\\&quot; &amp;&amp; inSnoozedState == false&apos;;
var replenishmentString11ROP = &apos;replenishmentMethod == \\&quot;REORDER_POINT\\&quot; &amp;&amp; itemFacilityInventoryDerivedParams.replenishmentType == \\&quot;REORDER_POINT\\&quot; &amp;&amp; inSnoozedState == false&apos;;
var latestRecomm = &apos;latestRecommendation.status == \\&quot;New\\&quot;&apos;;

var screenPage= vars.get(&quot;screen&quot;);

if (screenPage == &quot;UIOverviewFacilitiesGrid&quot;){
	vars.put(&quot;FilterOption&quot;, tier2Description11+&quot; &amp;&amp; &quot;+tier1Description11+&quot; &amp;&amp; &quot;+ serviceClass11);
	vars.put(&quot;FilterOptionParts&quot;, tier2Description11+&quot; &amp;&amp; &quot;+tier1Description11+&quot; &amp;&amp; &quot;+extraString11+&quot; &amp;&amp; &quot;+ serviceClass11);
	} 
else if (screenPage == &quot;recomm&quot;){
	vars.put(&quot;FilterOption&quot;, tier2Description11+&quot; &amp;&amp; &quot;+latestRecomm+&quot; &amp;&amp; &quot;+ tier1Description11+&quot; &amp;&amp; &quot;+ replenishmentString11+&quot; &amp;&amp; &quot;+ serviceClass11);
	vars.put(&quot;FilterOptionROP&quot;, tier2Description11+&quot; &amp;&amp; &quot;+latestRecomm+&quot; &amp;&amp; &quot;+ tier1Description11+&quot; &amp;&amp; &quot;+ replenishmentString11ROP+&quot; &amp;&amp; &quot;+ serviceClass11);
	vars.put(&quot;FilterOptionReport&quot;,  tier2Description11+&quot; &amp;&amp; &quot;+tier1Description11);
	vars.put(&quot;FilterOptionReportConfigHistory&quot;,  tier2Description11.replace(&quot;productHierarchyInventoryParams&quot;,&quot;parent.productHierarchyInventoryParams&quot;)+&quot; &amp;&amp; &quot;+tier1Description11.replace(&quot;productHierarchyInventoryParams&quot;,&quot;parent.productHierarchyInventoryParams&quot;)+&quot; &amp;&amp; &quot;+ serviceClass11);
	}  
else{
	vars.put(&quot;FilterOption&quot;, tier2Description11+&quot; &amp;&amp; &quot;+tier1Description11+&quot; &amp;&amp; &quot;+ serviceClass11);
	}</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
              <boolProp name="com.blazemeter.jmeter.debugger.engine.Debugger">true</boolProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="***Default" enabled="false">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">var defaultValue =&quot;latestRecommendation.status == &apos;New&apos; &amp;&amp; replenishmentMethod == &apos;SAFETY_STOCK&apos; &amp;&amp; itemFacilityInventoryDerivedParams.replenishmentType == &apos;SAFETY_STOCK&apos; &amp;&amp; inSnoozedState == false&quot;;


var screenPage= vars.get(&quot;screen&quot;);

if (screenPage == &quot;UIOverviewFacilitiesGrid&quot;){
	vars.put(&quot;FilterOption&quot;, defaultValue);
	}  
else if (screenPage == &quot;recomm&quot;){
	vars.put(&quot;FilterOption&quot;,defaultValue);
	} 
else{
	vars.put(&quot;FilterOption&quot;, defaultValue);
	}
</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
              <boolProp name="com.blazemeter.jmeter.debugger.engine.Debugger">true</boolProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="***BulkNon-Bulk" enabled="false">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">var bulkItem= &quot;${__RandomFromMultipleVars(bulk|nonBulk|bulkNonBulk)}&quot;;
log.info(&quot;Randomal type is &quot; + bulkItem);

var serviceClass11= &quot;intersects(latestBulkItems, &quot;+bulkItem+&quot;)&quot;;
log.info(&quot;Randomal type is &quot; + serviceClass11);

var extraString11 = &apos;facility == \\&quot;\\&quot; &amp;&amp; itemFacilityInventoryDerivedParams.serviceClassVarianceGrouping == \\&quot;\\&quot; &amp;&amp; itemFacilityGroups.from == \\&quot;\\&quot;&apos;;
var replenishmentString11 = &apos;replenishmentMethod == \\&quot;SAFETY_STOCK\\&quot; &amp;&amp; itemFacilityInventoryDerivedParams.replenishmentType == \\&quot;SAFETY_STOCK\\&quot;&apos;;
var replenishmentString11ROP = &apos;replenishmentMethod == \\&quot;REORDER_POINT\\&quot; &amp;&amp; itemFacilityInventoryDerivedParams.replenishmentType == \\&quot;REORDER_POINT\\&quot;&apos;;
var latestRecomm = &apos;latestRecommendation.status == \\&quot;New\\&quot;&apos;;
var inSnoozedState = &apos;inSnoozedState == false&apos;;


var screenPage= vars.get(&quot;screen&quot;);

if (screenPage == &quot;UIOverviewFacilitiesGrid&quot;){
	vars.put(&quot;FilterOption&quot;, serviceClass11);
	vars.put(&quot;FilterOptionParts&quot;, extraString11+&quot; &amp;&amp; &quot;+ (serviceClass11));
	} 
else if (screenPage == &quot;recomm&quot;){
	vars.put(&quot;FilterOption&quot;, latestRecomm+&quot; &amp;&amp; &quot;+replenishmentString11+&quot; &amp;&amp; &quot;+ serviceClass11+&quot; &amp;&amp; &quot;+ inSnoozedState);
	vars.put(&quot;FilterOptionROP&quot;, latestRecomm+&quot; &amp;&amp; &quot;+replenishmentString11ROP+&quot; &amp;&amp; &quot;+ serviceClass11+&quot; &amp;&amp; &quot;+ inSnoozedState);
	vars.put(&quot;FilterOptionReport&quot;,  serviceClass11);
	vars.put(&quot;FilterOptionReportConfigHistory&quot;,  serviceClass11.replaceAll(&quot;itemFacilityInventoryDerivedParams&quot;,&quot;parent.itemFacilityInventoryDerivedParams&quot;));
	} 
else{
	vars.put(&quot;FilterOption&quot;, serviceClass11);
	}

	&quot;intersects(latestBulkItems, [\&quot;true\&quot;])&quot;

	var serviceClass11= &quot;intersects(latestBulkItems, &quot;+screenPage+&quot;)&quot;</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
              <boolProp name="com.blazemeter.jmeter.debugger.engine.Debugger">true</boolProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="***BulkNon-Bulk2" enabled="false">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">var items = [&quot;${bulk}&quot;, &quot;${nonBulk}&quot;, &quot;${bulkNonBulk}&quot;];
var bulkItem = items[Math.floor(Math.random() * items.length)];

var serviceClass11= &quot;intersects(latestBulkItems, &quot;+bulkItem+&quot;)&quot;;
log.info(&quot;Randomal type is &quot; + serviceClass11);

var extraString11 = &apos;facility == \\&quot;\\&quot; &amp;&amp; itemFacilityInventoryDerivedParams.serviceClassVarianceGrouping == \\&quot;\\&quot; &amp;&amp; itemFacilityGroups.from == \\&quot;\\&quot;&apos;;
var replenishmentString11 = &apos;replenishmentMethod == \\&quot;SAFETY_STOCK\\&quot; &amp;&amp; itemFacilityInventoryDerivedParams.replenishmentType == \\&quot;SAFETY_STOCK\\&quot;&apos;;
var replenishmentString11ROP = &apos;replenishmentMethod == \\&quot;REORDER_POINT\\&quot; &amp;&amp; itemFacilityInventoryDerivedParams.replenishmentType == \\&quot;REORDER_POINT\\&quot;&apos;;
var latestRecomm = &apos;latestRecommendation.status == \\&quot;New\\&quot;&apos;;
var inSnoozedState = &apos;inSnoozedState == false&apos;;


var screenPage= vars.get(&quot;screen&quot;);

if (screenPage == &quot;UIOverviewFacilitiesGrid&quot;){
	vars.put(&quot;FilterOption&quot;, serviceClass11);
	vars.put(&quot;FilterOptionParts&quot;, extraString11+&quot; &amp;&amp; &quot;+ (serviceClass11));
	} 
else if (screenPage == &quot;recomm&quot;){
	vars.put(&quot;FilterOption&quot;, latestRecomm+&quot; &amp;&amp; &quot;+replenishmentString11+&quot; &amp;&amp; &quot;+ serviceClass11+&quot; &amp;&amp; &quot;+ inSnoozedState);
	vars.put(&quot;FilterOptionROP&quot;, latestRecomm+&quot; &amp;&amp; &quot;+replenishmentString11ROP+&quot; &amp;&amp; &quot;+ serviceClass11+&quot; &amp;&amp; &quot;+ inSnoozedState);
	vars.put(&quot;FilterOptionReport&quot;,  serviceClass11);
	vars.put(&quot;FilterOptionReportConfigHistory&quot;,  serviceClass11.replaceAll(&quot;itemFacilityInventoryDerivedParams&quot;,&quot;parent.itemFacilityInventoryDerivedParams&quot;));
	} 
else{
	vars.put(&quot;FilterOption&quot;, serviceClass11);
	}

	&quot;intersects(latestBulkItems, [\&quot;true\&quot;])&quot;

	var serviceClass11= &quot;intersects(latestBulkItems, &quot;+screenPage+&quot;)&quot;</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
              <boolProp name="com.blazemeter.jmeter.debugger.engine.Debugger">true</boolProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="***ServiceClass" enabled="false">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">function randomInteger(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

var serviceClassStart = (Math.round(Math.random() * 5 + 1));
var serviceClassEnd = randomInteger(serviceClassStart, 6);

var serviceClass11= &quot;(itemFacilityInventoryDerivedParams.serviceClass &gt;= &quot;+serviceClassStart+&quot; &amp;&amp; itemFacilityInventoryDerivedParams.serviceClass &lt;= &quot;+serviceClassEnd+&quot;)&quot;

var extraString11 = &apos;facility == \\&quot;\\&quot; &amp;&amp; itemFacilityInventoryDerivedParams.serviceClassVarianceGrouping == \\&quot;\\&quot; &amp;&amp; itemFacilityGroups.from == \\&quot;\\&quot;&apos;;
var replenishmentString11 = &apos;replenishmentMethod == \\&quot;SAFETY_STOCK\\&quot; &amp;&amp; itemFacilityInventoryDerivedParams.replenishmentType == \\&quot;SAFETY_STOCK\\&quot;&apos;;
var replenishmentString11ROP = &apos;replenishmentMethod == \\&quot;REORDER_POINT\\&quot; &amp;&amp; itemFacilityInventoryDerivedParams.replenishmentType == \\&quot;REORDER_POINT\\&quot;&apos;;
var latestRecomm = &apos;latestRecommendation.status == \\&quot;New\\&quot;&apos;;
var inSnoozedState = &apos;inSnoozedState == false&apos;;

var screenPage= vars.get(&quot;screen&quot;);

if (screenPage == &quot;UIOverviewFacilitiesGrid&quot;){
	vars.put(&quot;FilterOption&quot;, serviceClass11);
	vars.put(&quot;FilterOptionParts&quot;, extraString11+&quot; &amp;&amp; &quot;+ (serviceClass11));
	} 
else if (screenPage == &quot;recomm&quot;){
	vars.put(&quot;FilterOption&quot;, latestRecomm+&quot; &amp;&amp; &quot;+replenishmentString11+&quot; &amp;&amp; &quot;+ serviceClass11+&quot; &amp;&amp; &quot;+ inSnoozedState);
	vars.put(&quot;FilterOptionROP&quot;, latestRecomm+&quot; &amp;&amp; &quot;+replenishmentString11ROP+&quot; &amp;&amp; &quot;+ serviceClass11+&quot; &amp;&amp; &quot;+ inSnoozedState);
	vars.put(&quot;FilterOptionReport&quot;,  serviceClass11);
	vars.put(&quot;FilterOptionReportConfigHistory&quot;,  serviceClass11.replaceAll(&quot;itemFacilityInventoryDerivedParams&quot;,&quot;parent.itemFacilityInventoryDerivedParams&quot;));
	} 
else{
	vars.put(&quot;FilterOption&quot;, serviceClass11);
	}</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
              <boolProp name="com.blazemeter.jmeter.debugger.engine.Debugger">true</boolProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="***Facility" enabled="false">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">var facility_PATH1= vars.get(&quot;Facility_PATH1&quot;);
var facility_PATH11 = &quot;intersects(facility.name, [\\\&quot;&quot;+facility_PATH1+&quot;\\&quot;+&quot;\&quot;])&quot;;

var extraString11 = &apos;facility == \\&quot;\\&quot; &amp;&amp; itemFacilityInventoryDerivedParams.serviceClassVarianceGrouping == \\&quot;\\&quot; &amp;&amp; itemFacilityGroups.from == \\&quot;\\&quot;&apos;;

var screenPage= vars.get(&quot;screen&quot;);
var replenishmentString11 = &apos;replenishmentMethod == \\&quot;SAFETY_STOCK\\&quot; &amp;&amp; itemFacilityInventoryDerivedParams.replenishmentType == \\&quot;SAFETY_STOCK\\&quot;&apos;;
var replenishmentString11ROP = &apos;replenishmentMethod == \\&quot;REORDER_POINT\\&quot; &amp;&amp; itemFacilityInventoryDerivedParams.replenishmentType == \\&quot;REORDER_POINT\\&quot;&apos;;
var latestRecomm = &apos;latestRecommendation.status == \\&quot;New\\&quot;&apos;;
var inSnoozedState = &apos;inSnoozedState == false&apos;;


vars.put(&quot;FilterOption&quot;, facility_PATH11);
vars.put(&quot;FilterOptionParts&quot;, extraString11+&quot; &amp;&amp; &quot;+ facility_PATH11);
vars.put(&quot;FilterOptionRecomm&quot;, latestRecomm+&quot; &amp;&amp; &quot;+replenishmentString11+&quot; &amp;&amp; &quot;+ facility_PATH11+&quot; &amp;&amp; &quot;+ inSnoozedState);
vars.put(&quot;FilterOptionROP&quot;, latestRecomm+&quot; &amp;&amp; &quot;+replenishmentString11ROP+&quot; &amp;&amp; &quot;+ facility_PATH11+&quot; &amp;&amp; &quot;+ inSnoozedState);
vars.put(&quot;FilterOptionReport&quot;,  facility_PATH11);
vars.put(&quot;FilterOptionReportConfigHistory&quot;,  facility_PATH11.replaceAll(&quot;facility&quot;,&quot;parent.facility&quot;));</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
              <boolProp name="com.blazemeter.jmeter.debugger.engine.Debugger">true</boolProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="***FacilityGroup" enabled="false">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">var facilityGroup_PATH1= vars.get(&quot;FacilityGroup_PATH&quot;);
var facilityGroup_PATH11 = &quot;intersects(itemFacilityGroups.from.id, [\\\&quot;&quot;+facilityGroup_PATH1+&quot;\\&quot;+&quot;\&quot;])&quot;;

var extraString11 = &apos;facility == \\&quot;\\&quot; &amp;&amp; itemFacilityInventoryDerivedParams.serviceClassVarianceGrouping == \\&quot;\\&quot; &amp;&amp; itemFacilityGroups.from == \\&quot;\\&quot;&apos;;

var screenPage= vars.get(&quot;screen&quot;);
var screenPage= vars.get(&quot;screen&quot;);
var replenishmentString11 = &apos;replenishmentMethod == \\&quot;SAFETY_STOCK\\&quot; &amp;&amp; itemFacilityInventoryDerivedParams.replenishmentType == \\&quot;SAFETY_STOCK\\&quot;&apos;;
var replenishmentString11ROP = &apos;replenishmentMethod == \\&quot;REORDER_POINT\\&quot; &amp;&amp; itemFacilityInventoryDerivedParams.replenishmentType == \\&quot;REORDER_POINT\\&quot;&apos;;
var latestRecomm = &apos;latestRecommendation.status == \\&quot;New\\&quot;&apos;;
var inSnoozedState = &apos;inSnoozedState == false&apos;;

if (screenPage == &quot;UIOverviewFacilitiesGrid&quot;){
	vars.put(&quot;FilterOption&quot;, facilityGroup_PATH11);
	vars.put(&quot;FilterOptionParts&quot;, extraString11+&quot; &amp;&amp; &quot;+ facilityGroup_PATH11);
	} 
else if (screenPage == &quot;recomm&quot;){
	vars.put(&quot;FilterOption&quot;, latestRecomm+&quot; &amp;&amp; &quot;+replenishmentString11+&quot; &amp;&amp; &quot;+ inSnoozedState+&quot; &amp;&amp; &quot;+ facilityGroup_PATH11);
	vars.put(&quot;FilterOptionROP&quot;, latestRecomm+&quot; &amp;&amp; &quot;+replenishmentString11ROP+&quot; &amp;&amp; &quot;+ inSnoozedState+&quot; &amp;&amp; &quot;+ facilityGroup_PATH11);
	vars.put(&quot;FilterOptionReport&quot;,  facilityGroup_PATH11);
	vars.put(&quot;FilterOptionReportConfigHistory&quot;,  facilityGroup_PATH11.replaceAll(&quot;itemFacilityGroups&quot;,&quot;parent.itemFacilityGroups&quot;));
	}   
else{
	vars.put(&quot;FilterOption&quot;, facilityGroup_PATH11);
	}</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
              <boolProp name="com.blazemeter.jmeter.debugger.engine.Debugger">true</boolProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="***Tier1_2_ServiceClass_MakeBuy" enabled="false">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">vars.put(&quot;FilterOption&quot;, 
	vars.get(&quot;tier2Description11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;tier1Description11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;makeBuy_PATH11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;serviceClass11&quot;));

vars.put(&quot;FilterOptionParts&quot;, 
	vars.get(&quot;tier2Description11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;tier1Description11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;extraString12&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;extraString13&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;makeBuy_PATH11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;extraString14&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;serviceClass11&quot;));

vars.put(&quot;FilterOptionRecomm&quot;, 
	vars.get(&quot;tier2Description11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;latestRecomm&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;tier1Description11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;makeBuy_PATH11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;replenishmentString11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;serviceClass11&quot;));

vars.put(&quot;FilterOptionROP&quot;, 
	vars.get(&quot;tier2Description11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;latestRecomm&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;tier1Description11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;makeBuy_PATH11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;replenishmentString11ROP&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;serviceClass11&quot;));

vars.put(&quot;FilterOptionReport&quot;,  
	vars.get(&quot;tier2Description11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;tier1Description11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;makeBuy_PATH11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;serviceClass11&quot;));

vars.put(&quot;FilterOptionReportConfigHistory&quot;,  
	vars.get(&quot;tier2Description11&quot;).replace(&quot;productHierarchyInventoryParams&quot;,&quot;parent.productHierarchyInventoryParams&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;tier1Description11&quot;).replace(&quot;productHierarchyInventoryParams&quot;,&quot;parent.productHierarchyInventoryParams&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;makeBuy_PATH11&quot;).replace(&quot;procurementType&quot;,&quot;parent.procurementType&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;serviceClass11&quot;).replaceAll(&quot;itemFacilityInventoryDerivedParams.serviceClass&quot;,&quot;parent.itemFacilityInventoryDerivedParams.serviceClass&quot;));</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
              <boolProp name="com.blazemeter.jmeter.debugger.engine.Debugger">true</boolProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="***Facility_MRPType_classABC" enabled="false">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">vars.put(&quot;FilterOption&quot;, 
	vars.get(&quot;facility_PATH11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;classABC_PATH11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;mRPType_PATH11&quot;));

vars.put(&quot;FilterOptionParts&quot;, 
	vars.get(&quot;extraString11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;facility_PATH11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;classABC_PATH11&quot;) +&quot; &amp;&amp; &quot;+
	vars.get(&quot;mRPType_PATH11&quot;));

vars.put(&quot;FilterOptionRecomm&quot;, 
	vars.get(&quot;latestRecomm&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;replenishmentString11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;facility_PATH11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;inSnoozedState&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;classABC_PATH11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;mRPType_PATH11&quot;));
	
vars.put(&quot;FilterOptionROP&quot;, 
	vars.get(&quot;latestRecomm&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;replenishmentString11ROP&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;facility_PATH11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;inSnoozedState&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;classABC_PATH11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;mRPType_PATH11&quot;));
	
vars.put(&quot;FilterOptionReport&quot;,  
	vars.get(&quot;facility_PATH11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;classABC_PATH11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;mRPType_PATH11&quot;));
	
vars.put(&quot;FilterOptionReportConfigHistory&quot;, 
	vars.get(&quot;facility_PATH11&quot;).replace(&quot;facility&quot;,&quot;parent.facility&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;mRPType_PATH11&quot;).replaceAll(&quot;latestMRPType&quot;,&quot;parent.latestMRPType&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;classABC_PATH11&quot;));</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
              <boolProp name="com.blazemeter.jmeter.debugger.engine.Debugger">true</boolProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="***Facility_BulkNon-Bulk_SS_ROP" enabled="false">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">vars.put(&quot;FilterOption&quot;, 
	vars.get(&quot;replenishType_PATH11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;bulkNonBulkItem11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;facility_PATH11&quot;));
	
vars.put(&quot;FilterOptionParts&quot;, 
	vars.get(&quot;extraString12&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;replenishType_PATH11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;bulkNonBulkItem11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;extraString13&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;extraString14&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;facility_PATH11&quot;));
	
vars.put(&quot;FilterOptionRecomm&quot;, 
	vars.get(&quot;latestRecomm&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;replenishmentString11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;facility_PATH11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;inSnoozedState&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;bulkNonBulkItem11&quot;));
	
vars.put(&quot;FilterOptionROP&quot;, 
	vars.get(&quot;latestRecomm&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;replenishmentString11ROP&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;facility_PATH11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;inSnoozedState&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;bulkNonBulkItem11&quot;));
	
vars.put(&quot;FilterOptionReport&quot;, 
	vars.get(&quot;replenishType_PATH11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;bulkNonBulkItem11&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;facility_PATH11&quot;));
	
vars.put(&quot;FilterOptionReportConfigHistory&quot;, 
	vars.get(&quot;replenishType_PATH11&quot;).replaceAll(&quot;replenishmentMethod&quot;,&quot;parent.replenishmentMethod&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;bulkNonBulkItem11&quot;).replaceAll(&quot;latestBulkItems&quot;,&quot;parent.latestBulkItems&quot;) +&quot; &amp;&amp; &quot;+ 
	vars.get(&quot;facility_PATH11&quot;).replaceAll(&quot;facility&quot;,&quot;parent.facility&quot;));
	</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
              <boolProp name="com.blazemeter.jmeter.debugger.engine.Debugger">true</boolProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="***All" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">var InDaysValue = ${__Random(1,4,)};

if (InDaysValue == &quot;1&quot;){
	vars.put(&quot;FilterOption&quot;, vars.get(&quot;tier2Description11&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;tier1Description11&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;makeBuy_PATH11&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;serviceClass11&quot;));
vars.put(&quot;FilterOptionParts&quot;, vars.get(&quot;tier2Description11&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;tier1Description11&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;extraString12&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;extraString13&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;makeBuy_PATH11&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;extraString14&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;serviceClass11&quot;));
vars.put(&quot;FilterOptionRecomm&quot;, vars.get(&quot;tier2Description11&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;latestRecomm&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;tier1Description11&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;makeBuy_PATH11&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;replenishmentString11&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;serviceClass11&quot;));
vars.put(&quot;FilterOptionROP&quot;, vars.get(&quot;tier2Description11&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;latestRecomm&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;tier1Description11&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;makeBuy_PATH11&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;replenishmentString11ROP&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;serviceClass11&quot;));
vars.put(&quot;FilterOptionReport&quot;,  vars.get(&quot;tier2Description11&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;tier1Description11&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;makeBuy_PATH11&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;serviceClass11&quot;));
vars.put(&quot;FilterOptionReportConfigHistory&quot;,  vars.get(&quot;tier2Description11&quot;).replace(&quot;productHierarchyInventoryParams&quot;,&quot;parent.productHierarchyInventoryParams&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;tier1Description11&quot;).replace(&quot;productHierarchyInventoryParams&quot;,&quot;parent.productHierarchyInventoryParams&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;makeBuy_PATH11&quot;).replace(&quot;procurementType&quot;,&quot;parent.procurementType&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;serviceClass11&quot;).replaceAll(&quot;itemFacilityInventoryDerivedParams.serviceClass&quot;,&quot;parent.itemFacilityInventoryDerivedParams.serviceClass&quot;));
log.info(&quot;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++&quot;);
	} 
else if (InDaysValue == &quot;2&quot;){
vars.put(&quot;FilterOption&quot;, vars.get(&quot;facility_PATH11&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;classABC_PATH11&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;mRPType_PATH11&quot;));
vars.put(&quot;FilterOptionParts&quot;, vars.get(&quot;extraString11&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;facility_PATH11&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;classABC_PATH11&quot;) +&quot; &amp;&amp; &quot;+vars.get(&quot;mRPType_PATH11&quot;));
vars.put(&quot;FilterOptionRecomm&quot;, vars.get(&quot;latestRecomm&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;replenishmentString11&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;facility_PATH11&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;inSnoozedState&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;classABC_PATH11&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;mRPType_PATH11&quot;));
vars.put(&quot;FilterOptionROP&quot;, vars.get(&quot;latestRecomm&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;replenishmentString11ROP&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;facility_PATH11&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;inSnoozedState&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;classABC_PATH11&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;mRPType_PATH11&quot;));
vars.put(&quot;FilterOptionReport&quot;,  vars.get(&quot;facility_PATH11&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;classABC_PATH11&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;mRPType_PATH11&quot;));
vars.put(&quot;FilterOptionReportConfigHistory&quot;, vars.get(&quot;facility_PATH11&quot;).replace(&quot;facility&quot;,&quot;parent.facility&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;mRPType_PATH11&quot;).replaceAll(&quot;latestMRPType&quot;,&quot;parent.latestMRPType&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;classABC_PATH11&quot;));
log.info(&quot;____________________________________________________________________________________________________&quot;);
	} 
else if (InDaysValue == &quot;3&quot;){
vars.put(&quot;FilterOption&quot;,vars.get(&quot;tier2Description11&quot;) +&quot; &amp;&amp; &quot;+vars.get(&quot;tier1Description11&quot;) +&quot; &amp;&amp; &quot;+vars.get(&quot;tier3Description11&quot;));	
vars.put(&quot;FilterOptionParts&quot;,vars.get(&quot;tier2Description11&quot;) +&quot; &amp;&amp; &quot;+vars.get(&quot;tier1Description11&quot;) +&quot; &amp;&amp; &quot;+vars.get(&quot;extraString11&quot;) +&quot; &amp;&amp; &quot;+vars.get(&quot;tier3Description11&quot;));	
vars.put(&quot;FilterOptionRecomm&quot;,vars.get(&quot;tier2Description11&quot;) +&quot; &amp;&amp; &quot;+vars.get(&quot;latestRecomm&quot;) +&quot; &amp;&amp; &quot;+vars.get(&quot;tier1Description11&quot;) +&quot; &amp;&amp; &quot;+vars.get(&quot;replenishmentString11&quot;) +&quot; &amp;&amp; &quot;+vars.get(&quot;tier3Description11&quot;));	
vars.put(&quot;FilterOptionROP&quot;,vars.get(&quot;tier2Description11&quot;) +&quot; &amp;&amp; &quot;+vars.get(&quot;latestRecomm&quot;) +&quot; &amp;&amp; &quot;+vars.get(&quot;tier1Description11&quot;) +&quot; &amp;&amp; &quot;+vars.get(&quot;replenishmentString11ROP&quot;) +&quot; &amp;&amp; &quot;+vars.get(&quot;tier3Description11&quot;));
vars.put(&quot;FilterOptionReport&quot;,vars.get(&quot;tier2Description11&quot;) +&quot; &amp;&amp; &quot;+vars.get(&quot;tier1Description11&quot;) +&quot; &amp;&amp; &quot;+vars.get(&quot;tier3Description11&quot;));
vars.put(&quot;FilterOptionReportConfigHistory&quot;,vars.get(&quot;tier3Description11&quot;).replace(&quot;productHierarchyInventoryParams&quot;,&quot;parent.productHierarchyInventoryParams&quot;)+&quot; &amp;&amp; &quot;+
	vars.get(&quot;tier2Description11&quot;).replace(&quot;productHierarchyInventoryParams&quot;,&quot;parent.productHierarchyInventoryParams&quot;)+&quot; &amp;&amp; &quot;+
	vars.get(&quot;tier1Description11&quot;).replace(&quot;productHierarchyInventoryParams&quot;,&quot;parent.productHierarchyInventoryParams&quot;));	
	}	 
else{
	vars.put(&quot;FilterOption&quot;, vars.get(&quot;replenishType_PATH11&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;bulkNonBulkItem11&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;facility_PATH11&quot;));
vars.put(&quot;FilterOptionParts&quot;, vars.get(&quot;extraString12&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;replenishType_PATH11&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;bulkNonBulkItem11&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;extraString13&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;extraString14&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;facility_PATH11&quot;));
vars.put(&quot;FilterOptionRecomm&quot;, vars.get(&quot;latestRecomm&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;replenishmentString11&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;facility_PATH11&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;inSnoozedState&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;bulkNonBulkItem11&quot;));
vars.put(&quot;FilterOptionROP&quot;, vars.get(&quot;latestRecomm&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;replenishmentString11ROP&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;facility_PATH11&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;inSnoozedState&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;bulkNonBulkItem11&quot;));
vars.put(&quot;FilterOptionReport&quot;, vars.get(&quot;replenishType_PATH11&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;bulkNonBulkItem11&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;facility_PATH11&quot;));
vars.put(&quot;FilterOptionReportConfigHistory&quot;, vars.get(&quot;replenishType_PATH11&quot;).replaceAll(&quot;replenishmentMethod&quot;,&quot;parent.replenishmentMethod&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;bulkNonBulkItem11&quot;).replaceAll(&quot;latestBulkItems&quot;,&quot;parent.latestBulkItems&quot;) +&quot; &amp;&amp; &quot;+ vars.get(&quot;facility_PATH11&quot;).replaceAll(&quot;facility&quot;,&quot;parent.facility&quot;));
log.info(&quot;======================================================================================================&quot;)
	}</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
              <boolProp name="com.blazemeter.jmeter.debugger.engine.Debugger">true</boolProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="***All" enabled="false">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">var InDaysValue = ${__Random(1,3,)};

if (InDaysValue == &quot;1&quot;){
	vars.put(&quot;FilterOption&quot;, &quot;1&quot;);
	} 
else if (InDaysValue == &quot;2&quot;){
	vars.put(&quot;FilterOption&quot;, &quot;2&quot;);
	}  
else{
	vars.put(&quot;FilterOption&quot;, &quot;3&quot;);
	}</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
              <boolProp name="com.blazemeter.jmeter.debugger.engine.Debugger">true</boolProp>
            </JSR223Sampler>
            <hashTree/>
            <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Overview" enabled="true">
              <boolProp name="PARENT_SAMPLE">false</boolProp>
            </com.blazemeter.jmeter.controller.ParallelSampler>
            <hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-Default" enabled="false">
                <stringProp name="IfController.condition">${__groovy(vars.get(&quot;FilterOption&quot;) ==&quot;1==1&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UIOverviewFacilitiesGrid?action=fetch_Default_OverviewScreen" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;limit&quot;:10,&quot;include&quot;:&quot;facilityName, itemFacilityCount, averageDaysOnHand, inventoryCost, averageServiceLevel, inventorySavingsOpportunity, newRecommendations&quot;,&quot;filter&quot;:&quot;(facility.facilityType == &apos;MANUFACTURING_FACILITY&apos;)&quot;,&quot;order&quot;:&quot;descending(averageDaysOnHand)&quot;}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/1/UIOverviewFacilitiesGrid?action=fetch</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Content-type" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1314244092">exceptions</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">6</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UIOverviewFacilitiesGrid?action=fetch_Param_ConfigScreen_Plan_Param" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;limit&quot;:2000,&quot;include&quot;:&quot;item.name, facility.name, item.description, storedSupplier, storedSupplierName, valueInStock, quantityInStock.value, itemFacilityInventoryDerivedParams.itemSavingsOpportunityValue, latestMRPType, displayTargetServiceLevel, displayTargetMinimumDaysOnHand, displayTargetMaximumDaysOnHand, displayCarryCostPercentage, displayOrderCost&quot;,&quot;filter&quot;:&quot;&quot;,&quot;order&quot;:&quot;ascending(item.name)&quot;}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/1/ItemFacilityInventoryParams?action=fetch</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Content-type" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1314244092">exceptions</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">6</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UIOverviewFacilitiesGrid?action=fetch_Param_ConfigScreen_AutoAcceptReject" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;limit&quot;:2000,&quot;include&quot;:&quot;item.name, facility.name, item.description, storedSupplier, storedSupplierName, valueInStock, quantityInStock.value, itemFacilityInventoryDerivedParams.itemSavingsOpportunityValue, latestMRPType, autoAcknowledgeConfiguration.autoAcceptEvalExpressionToRender, autoAcknowledgeConfiguration.autoRejectEvalExpressionToRender&quot;,&quot;filter&quot;:&quot;&quot;,&quot;order&quot;:&quot;ascending(item.name)&quot;}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/1/ItemFacilityInventoryParams?action=fetch</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Content-type" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1314244092">exceptions</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">6</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ItemFacilityInventoryParams?action=fetchPartsGrid_Param_PartsScreen" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;include&quot;:&quot;item.name, facility.name, item.description, storedSupplier, storedSupplierName, valueInStock, quantityInStock.value, itemFacilityInventoryDerivedParams.itemSavingsOpportunityValue, latestMRPType, itemFacilityInventoryDerivedParams.burndownValue, itemFacilityInventoryDerivedParams.burndown, itemFacilityInventoryDerivedParams.serviceClass&quot;,&quot;limit&quot;:2000,&quot;filter&quot;:&quot;itemFacilityGroups.from == \&quot;\&quot; &amp;&amp; itemFacilityInventoryDerivedParams.serviceClassVarianceGrouping == \&quot;\&quot; &amp;&amp; facility == \&quot;\&quot;&quot;,&quot;order&quot;:&quot;descending(itemFacilityInventoryDerivedParams.itemSavingsOpportunityValue)&quot;}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/1/ItemFacilityInventoryParams?action=fetchPartsGrid</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Content-type" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-649067286">xception</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">6</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UIOverviewFacilitiesGrid?action=fetch_Default_Report_Clsd_Recomm" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;limit&quot;:2000,&quot;include&quot;:&quot;item.name, facility.name, storedSupplier, storedSupplierName, itemFacilityInventoryDerivedParams.replenishmentType, itemFacilityInventoryDerivedParams.actualPlanningParameterValue, itemFacilityInventoryDerivedParams.actualPlanningParameterQuantity, itemFacilityInventoryDerivedParams.simulatedPlanningParameterValue, itemFacilityInventoryDerivedParams.simulatedPlanningParameterQuantity, itemFacilityInventoryDerivedParams.simulatedPlanningParameterMinusActualPlanningParameterValue, itemFacilityInventoryDerivedParams.simulatedPlanningParameterMinusActualPlanningParameterQuantity, itemFacilityInventoryDerivedParams.simulatedPlanningParameterPercentActualPlanningParameter, latestRecommendation.status, latestRecommendation.overrideValue, latestRecommendation.statusDetail.reasonCode, latestRecommendation.statusDetail.comment, latestRecommendation.statusDetail.updatedBy.id, latestRecommendation.timestamp, latestRecommendation.statusDetail.timestamp&quot;,&quot;filter&quot;:&quot;(latestRecommendation.status != &apos;New&apos;)&quot;,&quot;order&quot;:&quot;descending(latestRecommendation.statusDetail.timestamp)&quot;}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URL_5}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/1/ItemFacilityInventoryParams?action=fetch</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Content-type" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1314244092">exceptions</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">6</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UIOverviewFacilitiesGrid?action=fetch_Default_Report_ConfigHistory" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;limit&quot;:2000,&quot;include&quot;:&quot;parent.item.name, parent.facility.name, parent.item.description, parent.storedSupplier, parent.latestMRPType, targetServiceLevel, targetMinimumDaysOnHand, targetMaximumDaysOnHand, carryCostPercentage, orderCost, meta.createdBy, meta.created&quot;,&quot;filter&quot;:&quot;&quot;,&quot;order&quot;:&quot;descending(meta.created)&quot;}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URL_5}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/1/PlanningParametersChangeSnapshot?action=fetch</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Content-type" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1314244092">exceptions</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">6</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-Param_Overview" enabled="true">
                <stringProp name="IfController.condition">${__groovy(vars.get(&quot;FilterOption&quot;) !=&quot;1==1&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UIOverviewFacilitiesGrid?action=fetch_Param_OverviewScreen" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;limit&quot;:10,&quot;include&quot;:&quot;facilityName, itemFacilityCount, averageDaysOnHand, inventoryCost, averageServiceLevel, inventorySavingsOpportunity, newRecommendations&quot;,&quot;filter&quot;:&quot;(facility.facilityType == &apos;MANUFACTURING_FACILITY&apos;) &amp;&amp; (( ${FilterOption} ) &amp;&amp; ( ${FilterOption} ))&quot;,&quot;order&quot;:&quot;descending(averageDaysOnHand)&quot;}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/1/UIOverviewFacilitiesGrid?action=fetch</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Content-type" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1314244092">exceptions</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">6</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UIOverviewFacilitiesGrid?action=fetch_Param_ConfigScreen_Plan_Param" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;limit&quot;:2000,&quot;include&quot;:&quot;item.name, facility.name, item.description, storedSupplier, storedSupplierName, valueInStock, quantityInStock.value, itemFacilityInventoryDerivedParams.itemSavingsOpportunityValue, latestMRPType, displayTargetServiceLevel, displayTargetMinimumDaysOnHand, displayTargetMaximumDaysOnHand, displayCarryCostPercentage, displayOrderCost&quot;,&quot;filter&quot;:&quot;(( ${FilterOption} ) &amp;&amp; ( ${FilterOption} ))&quot;,&quot;order&quot;:&quot;ascending(item.name)&quot;}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/1/ItemFacilityInventoryParams?action=fetch</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Content-type" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1314244092">exceptions</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">6</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UIOverviewFacilitiesGrid?action=fetch_Param_ConfigScreen_AutoAcceptReject" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;limit&quot;:2000,&quot;include&quot;:&quot;item.name, facility.name, item.description, storedSupplier, storedSupplierName, valueInStock, quantityInStock.value, itemFacilityInventoryDerivedParams.itemSavingsOpportunityValue, latestMRPType, autoAcknowledgeConfiguration.autoAcceptEvalExpressionToRender, autoAcknowledgeConfiguration.autoRejectEvalExpressionToRender&quot;,&quot;filter&quot;:&quot;(( ${FilterOption} ) &amp;&amp; ( ${FilterOption} ))&quot;,&quot;order&quot;:&quot;ascending(item.name)&quot;}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/1/ItemFacilityInventoryParams?action=fetch</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Content-type" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1314244092">exceptions</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">6</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ItemFacilityInventoryParams?action=fetchPartsGrid_Param_PartsScreen" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;include&quot;:&quot;item.name, facility.name, item.description, storedSupplier, storedSupplierName, valueInStock, quantityInStock.value, itemFacilityInventoryDerivedParams.itemSavingsOpportunityValue, latestMRPType, itemFacilityInventoryDerivedParams.burndownValue, itemFacilityInventoryDerivedParams.burndown, itemFacilityInventoryDerivedParams.serviceClass&quot;,&quot;limit&quot;:2000,&quot;filter&quot;:&quot;( ${FilterOptionParts} ) &amp;&amp; (${FilterOptionParts} )&quot;,&quot;order&quot;:&quot;descending(itemFacilityInventoryDerivedParams.itemSavingsOpportunityValue)&quot;}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/1/ItemFacilityInventoryParams?action=fetchPartsGrid</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Content-type" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-649067286">xception</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">6</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UIOverviewFacilitiesGrid?action=fetch_Param_Report_Clsd_Recomm" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;limit&quot;:2000,&quot;include&quot;:&quot;item.name, facility.name, storedSupplier, storedSupplierName, itemFacilityInventoryDerivedParams.replenishmentType, itemFacilityInventoryDerivedParams.actualPlanningParameterValue, itemFacilityInventoryDerivedParams.actualPlanningParameterQuantity, itemFacilityInventoryDerivedParams.simulatedPlanningParameterValue, itemFacilityInventoryDerivedParams.simulatedPlanningParameterQuantity, itemFacilityInventoryDerivedParams.simulatedPlanningParameterMinusActualPlanningParameterValue, itemFacilityInventoryDerivedParams.simulatedPlanningParameterMinusActualPlanningParameterQuantity, itemFacilityInventoryDerivedParams.simulatedPlanningParameterPercentActualPlanningParameter, latestRecommendation.status, latestRecommendation.overrideValue, latestRecommendation.statusDetail.reasonCode, latestRecommendation.statusDetail.comment, latestRecommendation.statusDetail.updatedBy.id, latestRecommendation.statusDetail.parentCreationTimestamp, latestRecommendation.statusDetail.timestamp&quot;,&quot;filter&quot;:&quot;(latestRecommendation.status != &apos;New&apos;) &amp;&amp; (( ${FilterOptionReport}) &amp;&amp; (${FilterOptionReport} ))&quot;,&quot;order&quot;:&quot;descending(latestRecommendation.statusDetail.timestamp)&quot;}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/1/ItemFacilityInventoryParams?action=fetch</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Content-type" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1314244092">exceptions</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">6</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UIOverviewFacilitiesGrid?action=fetch_Param_Report_ConfigHistory" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;limit&quot;:2000,&quot;include&quot;:&quot;parent.item.name, parent.facility.name, parent.item.description, parent.storedSupplier, parent.latestMRPType, targetServiceLevel, targetMinimumDaysOnHand, targetMaximumDaysOnHand, carryCostPercentage, orderCost, meta.createdBy, meta.created&quot;,&quot;filter&quot;:&quot;(( ${FilterOptionReportConfigHistory}) &amp;&amp; (${FilterOptionReportConfigHistory} ))&quot;,&quot;order&quot;:&quot;descending(meta.created)&quot;}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/1/PlanningParametersChangeSnapshot?action=fetch</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Content-type" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1314244092">exceptions</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">6</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CostOfGoodsSoldPastYearPerDay_93_CRMS=rollupMetrics" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;start&quot;:${startMonthDateZ},&quot;interval&quot;:&quot;DAY&quot;,&quot;bindings&quot;:{&quot;type&quot;:&quot;map&lt;string, any&gt;&quot;,&quot;value&quot;:{}},&quot;ids&quot;:[],&quot;filter&quot;:&quot;${FilterOption}&quot;,&quot;timeZone&quot;:&quot;NONE&quot;,&quot;end&quot;:${endMonthDateZ},&quot;expressions&quot;:[&quot;ActualInventoryCost,CostOfGoodsSoldPastYearPerDay&quot;],&quot;rollupFunc&quot;:&quot;SUM,DIVIDE&quot;,&quot;unitId&quot;:null}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/1/CachedRollupMetricSeries?action=rollupMetrics</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-type" elementType="Header">
                      <stringProp name="Header.name">Content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">https://bh-qa-inventoryplanning.c3iot.ai</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1314244092">exceptions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActualInventoryCost_732_CRMS=rollupMetrics" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;start&quot;:${startYearZ},&quot;interval&quot;:&quot;${itemInterval}&quot;,&quot;bindings&quot;:{&quot;type&quot;:&quot;map&lt;string, any&gt;&quot;,&quot;value&quot;:{}},&quot;filter&quot;:&quot;${FilterOption}&quot;,&quot;timeZone&quot;:&quot;NONE&quot;,&quot;end&quot;:${endTimeZ},&quot;expressions&quot;:[&quot;ActualInventoryCost&quot;],&quot;rollupFunc&quot;:&quot;SUM&quot;,&quot;unitId&quot;:&quot;USD&quot;}}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/1/CachedRollupMetricSeries?action=rollupMetrics</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-type" elementType="Header">
                      <stringProp name="Header.name">Content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">https://bh-qa-inventoryplanning.c3iot.ai</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1314244092">exceptions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SimulatedPlanningParameterCost_732_CRMS=rollupMetrics" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;start&quot;:${startYearZ},&quot;interval&quot;:&quot;${itemInterval}&quot;,&quot;bindings&quot;:{&quot;type&quot;:&quot;map&lt;string, any&gt;&quot;,&quot;value&quot;:{}},&quot;filter&quot;:&quot;${FilterOption}&quot;,&quot;timeZone&quot;:&quot;NONE&quot;,&quot;end&quot;:${endTimeZ},&quot;expressions&quot;:[&quot;SimulatedPlanningParameterCost&quot;],&quot;rollupFunc&quot;:&quot;SUM&quot;,&quot;unitId&quot;:&quot;USD&quot;}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/1/CachedRollupMetricSeries?action=rollupMetrics</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-type" elementType="Header">
                      <stringProp name="Header.name">Content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">https://bh-qa-inventoryplanning.c3iot.ai</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1314244092">exceptions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TotalOverriddenRecommendations_25_CRMS=rollupMetrics" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;start&quot;:${startYearZ},&quot;interval&quot;:&quot;${itemInterval}&quot;,&quot;bindings&quot;:{&quot;type&quot;:&quot;map&lt;string, any&gt;&quot;,&quot;value&quot;:{}},&quot;filter&quot;:&quot;${FilterOption}&quot;,&quot;timeZone&quot;:&quot;NONE&quot;,&quot;end&quot;:${endTimeZ},&quot;expressions&quot;:[&quot;TotalOverriddenRecommendations&quot;],&quot;rollupFunc&quot;:&quot;SUM&quot;,&quot;unitId&quot;:null}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/1/CachedRollupMetricSeries?action=rollupMetrics</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-type" elementType="Header">
                      <stringProp name="Header.name">Content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1314244092">exceptions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TotalRejectedRecommendations_25_CRMS=rollupMetrics" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;start&quot;:${startYearZ},&quot;interval&quot;:&quot;${itemInterval}&quot;,&quot;bindings&quot;:{&quot;type&quot;:&quot;map&lt;string, any&gt;&quot;,&quot;value&quot;:{}},&quot;filter&quot;:&quot;${FilterOption}&quot;,&quot;timeZone&quot;:&quot;NONE&quot;,&quot;end&quot;:${endTimeZ},&quot;expressions&quot;:[&quot;TotalRejectedRecommendations&quot;],&quot;rollupFunc&quot;:&quot;SUM&quot;,&quot;unitId&quot;:null}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/1/CachedRollupMetricSeries?action=rollupMetrics</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-type" elementType="Header">
                      <stringProp name="Header.name">Content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1314244092">exceptions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TotalAcceptedRecommendations_25_CRMS=rollupMetrics" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;start&quot;:${startYearZ},&quot;interval&quot;:&quot;${itemInterval}&quot;,&quot;bindings&quot;:{&quot;type&quot;:&quot;map&lt;string, any&gt;&quot;,&quot;value&quot;:{}},&quot;filter&quot;:&quot;${FilterOption}&quot;,&quot;timeZone&quot;:&quot;NONE&quot;,&quot;end&quot;:${endTimeZ},&quot;expressions&quot;:[&quot;TotalAcceptedRecommendations&quot;],&quot;rollupFunc&quot;:&quot;SUM&quot;,&quot;unitId&quot;:null}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/1/CachedRollupMetricSeries?action=rollupMetrics</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-type" elementType="Header">
                      <stringProp name="Header.name">Content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1314244092">exceptions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActualInventoryCost_93_ids_CRMS=rollupMetrics" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;start&quot;:${startMonthDateZ},&quot;interval&quot;:&quot;DAY&quot;,&quot;bindings&quot;:{&quot;type&quot;:&quot;map&lt;string, any&gt;&quot;,&quot;value&quot;:{}},&quot;ids&quot;:[],&quot;filter&quot;:&quot;${FilterOption}&quot;,&quot;timeZone&quot;:&quot;NONE&quot;,&quot;end&quot;:${endMonthDateZ},&quot;expressions&quot;:[&quot;ActualInventoryCost&quot;],&quot;rollupFunc&quot;:&quot;SUM&quot;,&quot;unitId&quot;:&quot;USD&quot;}}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/1/CachedRollupMetricSeries?action=rollupMetrics</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-type" elementType="Header">
                      <stringProp name="Header.name">Content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">https://bh-qa-inventoryplanning.c3iot.ai</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1314244092">exceptions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ItemFacilityCount_93_CRMS=rollupMetrics" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;start&quot;:${startMonthDateZ},&quot;interval&quot;:&quot;DAY&quot;,&quot;bindings&quot;:{&quot;type&quot;:&quot;map&lt;string, any&gt;&quot;,&quot;value&quot;:{}},&quot;ids&quot;:[],&quot;filter&quot;:&quot;${FilterOption}&quot;,&quot;timeZone&quot;:&quot;NONE&quot;,&quot;end&quot;:${endMonthDateZ},&quot;expressions&quot;:[&quot;ItemFacilityCount&quot;],&quot;rollupFunc&quot;:&quot;SUM&quot;,&quot;unitId&quot;:null}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/1/CachedRollupMetricSeries?action=rollupMetrics</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-type" elementType="Header">
                      <stringProp name="Header.name">Content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">https://bh-qa-inventoryplanning.c3iot.ai</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1314244092">exceptions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AverageTargetServiceLevel_93_CRMS=rollupMetrics" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;start&quot;:${startMonthDateZ},&quot;interval&quot;:&quot;DAY&quot;,&quot;bindings&quot;:{&quot;type&quot;:&quot;map&lt;string, any&gt;&quot;,&quot;value&quot;:{}},&quot;ids&quot;:[],&quot;filter&quot;:&quot;${FilterOption}&quot;,&quot;timeZone&quot;:&quot;NONE&quot;,&quot;end&quot;:${endMonthDateZ},&quot;expressions&quot;:[&quot;AverageTargetServiceLevel&quot;],&quot;rollupFunc&quot;:&quot;AVG&quot;,&quot;unitId&quot;:&quot;percent&quot;}}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/1/CachedRollupMetricSeries?action=rollupMetrics</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-type" elementType="Header">
                      <stringProp name="Header.name">Content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1314244092">exceptions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TotalNewRecommendations_93_CRMS=rollupMetrics" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;start&quot;:${startMonthDateZ},&quot;interval&quot;:&quot;DAY&quot;,&quot;bindings&quot;:{&quot;type&quot;:&quot;map&lt;string, any&gt;&quot;,&quot;value&quot;:{}},&quot;ids&quot;:[],&quot;filter&quot;:&quot;${FilterOption}&quot;,&quot;timeZone&quot;:&quot;NONE&quot;,&quot;end&quot;:${endMonthDateZ},&quot;expressions&quot;:[&quot;TotalNewRecommendations&quot;],&quot;rollupFunc&quot;:&quot;SUM&quot;,&quot;unitId&quot;:null}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/1/CachedRollupMetricSeries?action=rollupMetrics</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-type" elementType="Header">
                      <stringProp name="Header.name">Content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1314244092">exceptions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TotalInventorySavingsOpportunity_93_CRMS=rollupMetrics" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;start&quot;:${startMonthDateZ},&quot;interval&quot;:&quot;DAY&quot;,&quot;bindings&quot;:{&quot;type&quot;:&quot;map&lt;string, any&gt;&quot;,&quot;value&quot;:{}},&quot;ids&quot;:[],&quot;filter&quot;:&quot;${FilterOption}&quot;,&quot;timeZone&quot;:&quot;NONE&quot;,&quot;end&quot;:${endMonthDateZ},&quot;expressions&quot;:[&quot;TotalInventorySavingsOpportunity&quot;],&quot;rollupFunc&quot;:&quot;SUM&quot;,&quot;unitId&quot;:&quot;USD&quot;}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/1/CachedRollupMetricSeries?action=rollupMetrics</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-type" elementType="Header">
                      <stringProp name="Header.name">Content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1314244092">exceptions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActualInventoryCost_91_ids_CRMS=rollupMetrics" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;start&quot;:${startMonthDate91Z},&quot;interval&quot;:&quot;DAY&quot;,&quot;bindings&quot;:{&quot;type&quot;:&quot;map&lt;string, any&gt;&quot;,&quot;value&quot;:{}},&quot;ids&quot;:[],&quot;filter&quot;:&quot;${FilterOption}&quot;,&quot;timeZone&quot;:&quot;NONE&quot;,&quot;end&quot;:${endMonthDateZ},&quot;expressions&quot;:[&quot;ActualInventoryCost&quot;],&quot;rollupFunc&quot;:&quot;SUM&quot;,&quot;unitId&quot;:&quot;USD&quot;}}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/1/CachedRollupMetricSeries?action=rollupMetrics</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-type" elementType="Header">
                      <stringProp name="Header.name">Content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">https://bh-qa-inventoryplanning.c3iot.ai</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1314244092">exceptions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AverageTargetServiceLevel_91_CRMS=rollupMetrics" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;start&quot;:${startMonthDate91Z},&quot;interval&quot;:&quot;DAY&quot;,&quot;bindings&quot;:{&quot;type&quot;:&quot;map&lt;string, any&gt;&quot;,&quot;value&quot;:{}},&quot;ids&quot;:[],&quot;filter&quot;:&quot;${FilterOption}&quot;,&quot;timeZone&quot;:&quot;NONE&quot;,&quot;end&quot;:${endMonthDateZ},&quot;expressions&quot;:[&quot;AverageTargetServiceLevel&quot;],&quot;rollupFunc&quot;:&quot;AVG&quot;,&quot;unitId&quot;:&quot;percent&quot;}}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/1/CachedRollupMetricSeries?action=rollupMetrics</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-type" elementType="Header">
                      <stringProp name="Header.name">Content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1314244092">exceptions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CostOfGoodsSoldPastYearPerDay_91_CRMS=rollupMetrics" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;start&quot;:${startMonthDate91Z},&quot;interval&quot;:&quot;DAY&quot;,&quot;bindings&quot;:{&quot;type&quot;:&quot;map&lt;string, any&gt;&quot;,&quot;value&quot;:{}},&quot;ids&quot;:[],&quot;filter&quot;:&quot;${FilterOption}&quot;,&quot;timeZone&quot;:&quot;NONE&quot;,&quot;end&quot;:${endMonthDateZ},&quot;expressions&quot;:[&quot;ActualInventoryCost,CostOfGoodsSoldPastYearPerDay&quot;],&quot;rollupFunc&quot;:&quot;SUM,DIVIDE&quot;,&quot;unitId&quot;:null}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/1/CachedRollupMetricSeries?action=rollupMetrics</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-type" elementType="Header">
                      <stringProp name="Header.name">Content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">https://bh-qa-inventoryplanning.c3iot.ai</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1314244092">exceptions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Recomm" enabled="true">
              <boolProp name="PARENT_SAMPLE">false</boolProp>
            </com.blazemeter.jmeter.controller.ParallelSampler>
            <hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-Default" enabled="false">
                <stringProp name="IfController.condition">${__groovy(vars.get(&quot;FilterOption&quot;) ==&quot;latestRecommendation.status == &apos;New&apos; &amp;&amp; replenishmentMethod == &apos;SAFETY_STOCK&apos; &amp;&amp; itemFacilityInventoryDerivedParams.replenishmentType == &apos;SAFETY_STOCK&apos; &amp;&amp; inSnoozedState == false&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UIOverviewFacilitiesGrid?action=fetch_Default_Recomm_SS" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;limit&quot;:2000,&quot;include&quot;:&quot;item.name, facility.name, item.description, storedSupplier, storedSupplierName, valueInStock, quantityInStock.value, itemFacilityInventoryDerivedParams.actualPlanningParameterValue, itemFacilityInventoryDerivedParams.actualPlanningParameterQuantity, itemFacilityInventoryDerivedParams.simulatedPlanningParameterValue, itemFacilityInventoryDerivedParams.simulatedPlanningParameterQuantity, itemFacilityInventoryDerivedParams.simulatedPlanningParameterMinusActualPlanningParameterValue, itemFacilityInventoryDerivedParams.simulatedPlanningParameterMinusActualPlanningParameterQuantity, itemFacilityInventoryDerivedParams.simulatedPlanningParameterPercentActualPlanningParameter, itemFacilityInventoryDerivedParams.serviceClass, itemFacilityInventoryDerivedParams.burndownValue, itemFacilityInventoryDerivedParams.burndown, itemFacilityInventoryDerivedParams.phaseInOut&quot;,&quot;filter&quot;:&quot;(latestRecommendation.status == &apos;New&apos; &amp;&amp; replenishmentMethod == &apos;SAFETY_STOCK&apos; &amp;&amp; itemFacilityInventoryDerivedParams.replenishmentType == &apos;SAFETY_STOCK&apos; &amp;&amp; inSnoozedState == false)&quot;,&quot;order&quot;:&quot;ascending(itemFacilityInventoryDerivedParams.simulatedPlanningParameterMinusActualPlanningParameterValue)&quot;}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URL_5}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/1/ItemFacilityInventoryParams?action=fetch</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Content-type" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1314244092">exceptions</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">6</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UIOverviewFacilitiesGrid?action=fetch_Default_Recomm_ROP" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;limit&quot;:2000,&quot;include&quot;:&quot;item.name, facility.name, item.description, storedSupplier, storedSupplierName, valueInStock, quantityInStock.value, displayMinLotSize, economicOrderQuantity, itemFacilityInventoryDerivedParams.actualPlanningParameterValue, itemFacilityInventoryDerivedParams.actualPlanningParameterQuantity, itemFacilityInventoryDerivedParams.simulatedPlanningParameterValue, itemFacilityInventoryDerivedParams.simulatedPlanningParameterQuantity, itemFacilityInventoryDerivedParams.simulatedPlanningParameterMinusActualPlanningParameterValue, itemFacilityInventoryDerivedParams.simulatedPlanningParameterMinusActualPlanningParameterQuantity, itemFacilityInventoryDerivedParams.simulatedPlanningParameterPercentActualPlanningParameter, itemFacilityInventoryDerivedParams.serviceClass, itemFacilityInventoryDerivedParams.burndownValue, itemFacilityInventoryDerivedParams.burndown, itemFacilityInventoryDerivedParams.phaseInOut&quot;,&quot;filter&quot;:&quot;(latestRecommendation.status == &apos;New&apos; &amp;&amp; replenishmentMethod == &apos;REORDER_POINT&apos; &amp;&amp; itemFacilityInventoryDerivedParams.replenishmentType == &apos;REORDER_POINT&apos; &amp;&amp; inSnoozedState == false)&quot;,&quot;order&quot;:&quot;ascending(itemFacilityInventoryDerivedParams.simulatedPlanningParameterMinusActualPlanningParameterValue)&quot;}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URL_5}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/1/ItemFacilityInventoryParams?action=fetch</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Content-type" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1314244092">exceptions</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">6</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UIOverviewFacilitiesGrid?action=fetch_Default_Recomm_Snooze" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;limit&quot;:2000,&quot;include&quot;:&quot;item.name, facility.name, item.description, storedSupplier, storedSupplierName, valueInStock, quantityInStock.value, itemFacilityInventoryDerivedParams.replenishmentType, itemFacilityInventoryDerivedParams.actualPlanningParameterValue, itemFacilityInventoryDerivedParams.actualPlanningParameterQuantity, itemFacilityInventoryDerivedParams.simulatedPlanningParameterValue, itemFacilityInventoryDerivedParams.simulatedPlanningParameterQuantity, itemFacilityInventoryDerivedParams.simulatedPlanningParameterMinusActualPlanningParameterValue, itemFacilityInventoryDerivedParams.simulatedPlanningParameterMinusActualPlanningParameterQuantity, itemFacilityInventoryDerivedParams.simulatedPlanningParameterPercentActualPlanningParameter, snoozeReasonCode, snoozeComment, snoozeUser.id, snoozeUntil&quot;,&quot;filter&quot;:&quot;(latestRecommendation.status == &apos;New&apos; &amp;&amp; replenishmentMethod == itemFacilityInventoryDerivedParams.replenishmentType &amp;&amp; inSnoozedState == true)&quot;,&quot;order&quot;:&quot;ascending(itemFacilityInventoryDerivedParams.simulatedPlanningParameterMinusActualPlanningParameterValue)&quot;}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URL_5}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/1/ItemFacilityInventoryParams?action=fetch</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Content-type" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1314244092">exceptions</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">6</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UIOverviewFacilitiesGrid?action=fetch_Default_Report_SS_Export" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;limit&quot;:2000,&quot;include&quot;:&quot;item.name, facility.id, itemFacilityInventoryDerivedParams.sapExportValue&quot;,&quot;filter&quot;:&quot;((latestRecommendation.status == &apos;Accepted&apos; || latestRecommendation.status == &apos;Override&apos;) &amp;&amp; replenishmentMethod == &apos;SAFETY_STOCK&apos; &amp;&amp; itemFacilityInventoryDerivedParams.replenishmentType == &apos;SAFETY_STOCK&apos;)&quot;,&quot;order&quot;:&quot;descending(item.name)&quot;}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URL_5}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/1/ItemFacilityInventoryParams?action=fetch</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Content-type" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1314244092">exceptions</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">6</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UIOverviewFacilitiesGrid?action=fetch_Default_Report_ROP_Export" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;limit&quot;:2000,&quot;include&quot;:&quot;item.name, facility.id, itemFacilityInventoryDerivedParams.sapExportValue&quot;,&quot;filter&quot;:&quot;((latestRecommendation.status == &apos;Accepted&apos; || latestRecommendation.status == &apos;Override&apos;) &amp;&amp; replenishmentMethod == &apos;REORDER_POINT&apos; &amp;&amp; itemFacilityInventoryDerivedParams.replenishmentType == &apos;REORDER_POINT&apos;)&quot;,&quot;order&quot;:&quot;descending(item.name)&quot;}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URL_5}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/1/ItemFacilityInventoryParams?action=fetch</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Content-type" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1314244092">exceptions</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">6</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-Param_Recomm" enabled="true">
                <stringProp name="IfController.condition">${__groovy(vars.get(&quot;FilterOption&quot;) !=&quot;latestRecommendation.status == &apos;New&apos; &amp;&amp; replenishmentMethod == &apos;SAFETY_STOCK&apos; &amp;&amp; itemFacilityInventoryDerivedParams.replenishmentType == &apos;SAFETY_STOCK&apos; &amp;&amp; inSnoozedState == false&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UIOverviewFacilitiesGrid?action=fetch_Param_Recomm_SS" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;limit&quot;:2000,&quot;include&quot;:&quot;item.name, facility.name, item.description, storedSupplier, storedSupplierName, valueInStock, quantityInStock.value, itemFacilityInventoryDerivedParams.actualPlanningParameterValue, itemFacilityInventoryDerivedParams.actualPlanningParameterQuantity, itemFacilityInventoryDerivedParams.simulatedPlanningParameterValue, itemFacilityInventoryDerivedParams.simulatedPlanningParameterQuantity, itemFacilityInventoryDerivedParams.simulatedPlanningParameterMinusActualPlanningParameterValue, itemFacilityInventoryDerivedParams.simulatedPlanningParameterMinusActualPlanningParameterQuantity, itemFacilityInventoryDerivedParams.simulatedPlanningParameterPercentActualPlanningParameter, itemFacilityInventoryDerivedParams.serviceClass, itemFacilityInventoryDerivedParams.burndownValue, itemFacilityInventoryDerivedParams.burndown, itemFacilityInventoryDerivedParams.phaseInOut&quot;,&quot;filter&quot;:&quot;(latestRecommendation.status == &apos;New&apos; &amp;&amp; replenishmentMethod == &apos;SAFETY_STOCK&apos; &amp;&amp; itemFacilityInventoryDerivedParams.replenishmentType == &apos;SAFETY_STOCK&apos; &amp;&amp; inSnoozedState == false) &amp;&amp; (( ${FilterOptionRecomm}) &amp;&amp; (${FilterOptionRecomm} ))&quot;,&quot;order&quot;:&quot;ascending(itemFacilityInventoryDerivedParams.simulatedPlanningParameterMinusActualPlanningParameterValue)&quot;}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/1/ItemFacilityInventoryParams?action=fetch</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Content-type" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1314244092">exceptions</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">6</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UIOverviewFacilitiesGrid?action=fetch_Param_Recomm_ROP" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;limit&quot;:2000,&quot;include&quot;:&quot;item.name, facility.name, item.description, storedSupplier, storedSupplierName, valueInStock, quantityInStock.value, displayMinLotSize, economicOrderQuantity, itemFacilityInventoryDerivedParams.actualPlanningParameterValue, itemFacilityInventoryDerivedParams.actualPlanningParameterQuantity, itemFacilityInventoryDerivedParams.simulatedPlanningParameterValue, itemFacilityInventoryDerivedParams.simulatedPlanningParameterQuantity, itemFacilityInventoryDerivedParams.simulatedPlanningParameterMinusActualPlanningParameterValue, itemFacilityInventoryDerivedParams.simulatedPlanningParameterMinusActualPlanningParameterQuantity, itemFacilityInventoryDerivedParams.simulatedPlanningParameterPercentActualPlanningParameter, itemFacilityInventoryDerivedParams.serviceClass, itemFacilityInventoryDerivedParams.burndownValue, itemFacilityInventoryDerivedParams.burndown, itemFacilityInventoryDerivedParams.phaseInOut&quot;,&quot;filter&quot;:&quot;(latestRecommendation.status == &apos;New&apos; &amp;&amp; replenishmentMethod == &apos;REORDER_POINT&apos; &amp;&amp; itemFacilityInventoryDerivedParams.replenishmentType == &apos;REORDER_POINT&apos; &amp;&amp; inSnoozedState == false) &amp;&amp; (( ${FilterOptionROP}) &amp;&amp; (${FilterOptionROP} ))&quot;,&quot;order&quot;:&quot;ascending(itemFacilityInventoryDerivedParams.simulatedPlanningParameterMinusActualPlanningParameterValue)&quot;}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/1/ItemFacilityInventoryParams?action=fetch</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Content-type" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1314244092">exceptions</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">6</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UIOverviewFacilitiesGrid?action=fetch_Param_Report_SS_Export" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;limit&quot;:2000,&quot;include&quot;:&quot;item.name, facility.id, itemFacilityInventoryDerivedParams.sapExportValue&quot;,&quot;filter&quot;:&quot;((latestRecommendation.status == &apos;Accepted&apos; || latestRecommendation.status == &apos;Override&apos;) &amp;&amp; replenishmentMethod == &apos;SAFETY_STOCK&apos; &amp;&amp; itemFacilityInventoryDerivedParams.replenishmentType == &apos;SAFETY_STOCK&apos;) &amp;&amp; (( ${FilterOptionReport}) &amp;&amp; (${FilterOptionReport} ))&quot;,&quot;order&quot;:&quot;descending(item.name)&quot;}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/1/ItemFacilityInventoryParams?action=fetch</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Content-type" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1314244092">exceptions</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">6</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UIOverviewFacilitiesGrid?action=fetch_Param_Report_ROP_Export" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;limit&quot;:2000,&quot;include&quot;:&quot;item.name, facility.id, itemFacilityInventoryDerivedParams.sapExportValue&quot;,&quot;filter&quot;:&quot;((latestRecommendation.status == &apos;Accepted&apos; || latestRecommendation.status == &apos;Override&apos;) &amp;&amp; replenishmentMethod == &apos;REORDER_POINT&apos; &amp;&amp; itemFacilityInventoryDerivedParams.replenishmentType == &apos;REORDER_POINT&apos;) &amp;&amp; (( ${FilterOptionReport}) &amp;&amp; (${FilterOptionReport} ))&quot;,&quot;order&quot;:&quot;descending(item.name)&quot;}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/api/1/ItemFacilityInventoryParams?action=fetch</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Content-type" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1314244092">exceptions</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">6</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ActualInventoryCost_4_ids_CRMS_Recomm=rollupMetrics" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;start&quot;:${startMonth4Z},&quot;interval&quot;:&quot;MONTH&quot;,&quot;bindings&quot;:{&quot;type&quot;:&quot;map&lt;string, any&gt;&quot;,&quot;value&quot;:{}},&quot;ids&quot;:[],&quot;filter&quot;:&quot;${FilterOptionRecomm}&quot;,&quot;timeZone&quot;:&quot;NONE&quot;,&quot;end&quot;:${endMonth4Z},&quot;expressions&quot;:[&quot;ActualInventoryCost&quot;],&quot;rollupFunc&quot;:&quot;SUM&quot;,&quot;unitId&quot;:&quot;USD&quot;}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/1/CachedRollupMetricSeries?action=rollupMetrics</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-type" elementType="Header">
                      <stringProp name="Header.name">Content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">https://bh-qa-inventoryplanning.c3iot.ai</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1314244092">exceptions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ItemFacilityCount_4_ids_CRMS_Recomm=rollupMetrics" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;start&quot;:${startMonth4Z},&quot;interval&quot;:&quot;MONTH&quot;,&quot;bindings&quot;:{&quot;type&quot;:&quot;map&lt;string, any&gt;&quot;,&quot;value&quot;:{}},&quot;ids&quot;:[],&quot;filter&quot;:&quot;${FilterOptionRecomm}&quot;,&quot;timeZone&quot;:&quot;NONE&quot;,&quot;end&quot;:${endMonth4Z},&quot;expressions&quot;:[&quot;ItemFacilityCount&quot;],&quot;rollupFunc&quot;:&quot;SUM&quot;,&quot;unitId&quot;:null}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/1/CachedRollupMetricSeries?action=rollupMetrics</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-type" elementType="Header">
                      <stringProp name="Header.name">Content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">https://bh-qa-inventoryplanning.c3iot.ai</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1314244092">exceptions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AverageTargetServiceLevel_4_ids_CRMS_Recomm=rollupMetrics" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;start&quot;:${startMonth4Z},&quot;interval&quot;:&quot;MONTH&quot;,&quot;bindings&quot;:{&quot;type&quot;:&quot;map&lt;string, any&gt;&quot;,&quot;value&quot;:{}},&quot;ids&quot;:[],&quot;filter&quot;:&quot;${FilterOptionRecomm}&quot;,&quot;timeZone&quot;:&quot;NONE&quot;,&quot;end&quot;:${endMonth4Z},&quot;expressions&quot;:[&quot;AverageTargetServiceLevel&quot;],&quot;rollupFunc&quot;:&quot;AVG&quot;,&quot;unitId&quot;:&quot;percent&quot;}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/1/CachedRollupMetricSeries?action=rollupMetrics</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-type" elementType="Header">
                      <stringProp name="Header.name">Content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">https://bh-qa-inventoryplanning.c3iot.ai</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1314244092">exceptions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CostOfGoodsSoldPastYearPerDay_93_CRMS_Recomm=rollupMetrics" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;start&quot;:${startMonthDateZ},&quot;interval&quot;:&quot;DAY&quot;,&quot;bindings&quot;:{&quot;type&quot;:&quot;map&lt;string, any&gt;&quot;,&quot;value&quot;:{}},&quot;ids&quot;:[],&quot;filter&quot;:&quot;${FilterOptionRecomm}&quot;,&quot;timeZone&quot;:&quot;NONE&quot;,&quot;end&quot;:${endMonthDateZ},&quot;expressions&quot;:[&quot;ActualInventoryCost,CostOfGoodsSoldPastYearPerDay&quot;],&quot;rollupFunc&quot;:&quot;SUM,DIVIDE&quot;,&quot;unitId&quot;:null}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/1/CachedRollupMetricSeries?action=rollupMetrics</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-type" elementType="Header">
                      <stringProp name="Header.name">Content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">https://bh-qa-inventoryplanning.c3iot.ai</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1314244092">exceptions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CostOfGoodsSoldPastYearPerDay_91_CRMS_Recomm=rollupMetrics" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;start&quot;:${startMonthDate91Z},&quot;interval&quot;:&quot;DAY&quot;,&quot;bindings&quot;:{&quot;type&quot;:&quot;map&lt;string, any&gt;&quot;,&quot;value&quot;:{}},&quot;ids&quot;:[],&quot;filter&quot;:&quot;${FilterOptionRecomm}&quot;,&quot;timeZone&quot;:&quot;NONE&quot;,&quot;end&quot;:${endMonthDateZ},&quot;expressions&quot;:[&quot;ActualInventoryCost,CostOfGoodsSoldPastYearPerDay&quot;],&quot;rollupFunc&quot;:&quot;SUM,DIVIDE&quot;,&quot;unitId&quot;:null}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/1/CachedRollupMetricSeries?action=rollupMetrics</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-type" elementType="Header">
                      <stringProp name="Header.name">Content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">https://bh-qa-inventoryplanning.c3iot.ai</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1314244092">exceptions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TotalNewRecommendations_4_ids_CRMS_Recomm=rollupMetrics" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;start&quot;:${startMonth4Z},&quot;interval&quot;:&quot;MONTH&quot;,&quot;bindings&quot;:{&quot;type&quot;:&quot;map&lt;string, any&gt;&quot;,&quot;value&quot;:{}},&quot;ids&quot;:[],&quot;filter&quot;:&quot;${FilterOptionRecomm}&quot;,&quot;timeZone&quot;:&quot;NONE&quot;,&quot;end&quot;:${endMonth4Z},&quot;expressions&quot;:[&quot;TotalNewRecommendations&quot;],&quot;rollupFunc&quot;:&quot;SUM&quot;,&quot;unitId&quot;:null}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/1/CachedRollupMetricSeries?action=rollupMetrics</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-type" elementType="Header">
                      <stringProp name="Header.name">Content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">https://bh-qa-inventoryplanning.c3iot.ai</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1314244092">exceptions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TotalInventorySavingsOpportunity_4_ids_CRMS_Recomm=rollupMetrics" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;start&quot;:${startMonth4Z},&quot;interval&quot;:&quot;MONTH&quot;,&quot;bindings&quot;:{&quot;type&quot;:&quot;map&lt;string, any&gt;&quot;,&quot;value&quot;:{}},&quot;ids&quot;:[],&quot;filter&quot;:&quot;${FilterOptionRecomm}&quot;,&quot;timeZone&quot;:&quot;NONE&quot;,&quot;end&quot;:${endMonth4Z},&quot;expressions&quot;:[&quot;TotalInventorySavingsOpportunity&quot;],&quot;rollupFunc&quot;:&quot;SUM&quot;,&quot;unitId&quot;:&quot;USD&quot;}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/1/CachedRollupMetricSeries?action=rollupMetrics</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-type" elementType="Header">
                      <stringProp name="Header.name">Content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">https://bh-qa-inventoryplanning.c3iot.ai</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1314244092">exceptions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Analysis" enabled="true">
              <boolProp name="PARENT_SAMPLE">false</boolProp>
            </com.blazemeter.jmeter.controller.ParallelSampler>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Quantities_732_ItemFacilityInventoryParams?action=evalMetrics" enabled="false">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;expressions&quot;:[&quot;ActualInventoryCost&quot;,&quot;${Quantities}&quot;],&quot;start&quot;:${startYearZ},&quot;end&quot;:${endTimeZ},&quot;unitId&quot;:null,&quot;interval&quot;:&quot;DAY&quot;,&quot;bindings&quot;:{&quot;type&quot;:&quot;map&lt;string, any&gt;&quot;,&quot;value&quot;:{}},&quot;timeZone&quot;:&quot;NONE&quot;,&quot;ids&quot;:[&quot;${analysisTag}&quot;]}}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/1/ItemFacilityInventoryParams?action=evalMetrics</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-type" elementType="Header">
                      <stringProp name="Header.name">Content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">https://bh-qa-inventoryplanning.c3iot.ai</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1314244092">exceptions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Re-Order_732_ItemFacilityInventoryParams?action=evalMetrics" enabled="false">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;expressions&quot;:[&quot;ActualInventoryCost&quot;,&quot;${Re-Order}&quot;],&quot;start&quot;:${startYearZ},&quot;end&quot;:${endTimeZ},&quot;unitId&quot;:null,&quot;interval&quot;:&quot;DAY&quot;,&quot;bindings&quot;:{&quot;type&quot;:&quot;map&lt;string, any&gt;&quot;,&quot;value&quot;:{}},&quot;timeZone&quot;:&quot;NONE&quot;,&quot;ids&quot;:[&quot;${analysisTag}&quot;]}}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/1/ItemFacilityInventoryParams?action=evalMetrics</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-type" elementType="Header">
                      <stringProp name="Header.name">Content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">https://bh-qa-inventoryplanning.c3iot.ai</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1314244092">exceptions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Configurations_732_ItemFacilityInventoryParams?action=evalMetrics" enabled="false">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;expressions&quot;:[&quot;ActualInventoryCost&quot;,&quot;${Configurations}&quot;],&quot;start&quot;:${startYearZ},&quot;end&quot;:${endTimeZ},&quot;unitId&quot;:null,&quot;interval&quot;:&quot;DAY&quot;,&quot;bindings&quot;:{&quot;type&quot;:&quot;map&lt;string, any&gt;&quot;,&quot;value&quot;:{}},&quot;timeZone&quot;:&quot;NONE&quot;,&quot;ids&quot;:[&quot;${analysisTag}&quot;]}}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/1/ItemFacilityInventoryParams?action=evalMetrics</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-type" elementType="Header">
                      <stringProp name="Header.name">Content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">https://bh-qa-inventoryplanning.c3iot.ai</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1314244092">exceptions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Simulation_Results_732_ItemFacilityInventoryParams?action=evalMetrics" enabled="false">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;expressions&quot;:[&quot;ActualInventoryCost&quot;,&quot;${Simulation_Results}&quot;],&quot;start&quot;:${startYearZ},&quot;end&quot;:${endTimeZ},&quot;unitId&quot;:null,&quot;interval&quot;:&quot;DAY&quot;,&quot;bindings&quot;:{&quot;type&quot;:&quot;map&lt;string, any&gt;&quot;,&quot;value&quot;:{}},&quot;timeZone&quot;:&quot;NONE&quot;,&quot;ids&quot;:[&quot;${analysisTag}&quot;]}}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/1/ItemFacilityInventoryParams?action=evalMetrics</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-type" elementType="Header">
                      <stringProp name="Header.name">Content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">https://bh-qa-inventoryplanning.c3iot.ai</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1314244092">exceptions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="itemOneByOne_732_ItemFacilityInventoryParams?action=evalMetrics" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;expressions&quot;:[&quot;ActualInventoryCost&quot;,&quot;${itemFiltr}&quot;],&quot;start&quot;:${startYearZ},&quot;end&quot;:${endTimeZ},&quot;unitId&quot;:null,&quot;interval&quot;:&quot;${itemInterval}&quot;,&quot;bindings&quot;:{&quot;type&quot;:&quot;map&lt;string, any&gt;&quot;,&quot;value&quot;:{}},&quot;timeZone&quot;:&quot;NONE&quot;,&quot;ids&quot;:[&quot;${analysisTag}&quot;]}}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/1/ItemFacilityInventoryParams?action=evalMetrics</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-type" elementType="Header">
                      <stringProp name="Header.name">Content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">https://bh-qa-inventoryplanning.c3iot.ai</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1314244092">exceptions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="itemComb_732_ItemFacilityInventoryParams?action=evalMetrics" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;spec&quot;:{&quot;expressions&quot;:[&quot;ActualInventoryCost&quot;,&quot;${itemComb}&quot;],&quot;start&quot;:${startYearZ},&quot;end&quot;:${endTimeZ},&quot;unitId&quot;:null,&quot;interval&quot;:&quot;${itemInterval}&quot;,&quot;bindings&quot;:{&quot;type&quot;:&quot;map&lt;string, any&gt;&quot;,&quot;value&quot;:{}},&quot;timeZone&quot;:&quot;NONE&quot;,&quot;ids&quot;:[&quot;${analysisTag1}&quot;]}}&#xd;
&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/1/ItemFacilityInventoryParams?action=evalMetrics</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-type" elementType="Header">
                      <stringProp name="Header.name">Content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">https://bh-qa-inventoryplanning.c3iot.ai</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1314244092">exceptions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Unit?action=get" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;this&quot;:{&quot;id&quot;:&quot;USD&quot;},&quot;include&quot;:&quot;symbol&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/1/Unit?action=get</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Content-type" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Unit?action=get" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;this&quot;:{&quot;id&quot;:&quot;percent&quot;},&quot;include&quot;:&quot;symbol&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/1/Unit?action=get</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Content-type" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Unit?action=get" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;this&quot;:{&quot;id&quot;:&quot;USD&quot;},&quot;include&quot;:&quot;symbol&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/1/Unit?action=get</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Content-type" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">300</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Get_Date JSR223 PreProcessor1" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat; 
import java.util.Date; 

// You need to define ${InDays} as how many days forward/back you want to go
int InDays = Integer.valueOf(vars.get(&quot;InDays&quot;));

Date date = new Date(); 
date.setDate(date.getDate() - InDays); 
SimpleDateFormat df  = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.sssXXX&quot;); 
String formattedDate1 = df.format(date); 
String formattedDate = &quot;\&quot;&quot;+formattedDate1+&quot;\&quot;&quot;; 

// Resulting date will be in ${FutureDate}
vars.put(&quot;startTimeZ&quot;,formattedDate);

int InYear = Integer.valueOf(vars.get(&quot;InYear&quot;));

Date dateYear = new Date(); 
dateYear.setDate(dateYear.getDate() - InYear); 
SimpleDateFormat dfYear  = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.sssXXX&quot;); 
String formattedDate2 = dfYear.format(dateYear); 
String formattedDateYear = &quot;\&quot;&quot;+formattedDate2+&quot;\&quot;&quot;; 

// Resulting date will be in ${FutureDate}
vars.put(&quot;startYearZ&quot;,formattedDateYear);
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Get_Date JSR223 PreProcessor2" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat; 
import java.util.Date; 

// You need to define ${InDays} as how many days forward/back you want to go
//int startInMonth = Integer.valueOf(vars.get(&quot;startInMonth&quot;));
//int endInMonth = Integer.valueOf(vars.get(&quot;endInMonth&quot;));

Date startDate = new Date(); 
Date endDate = new Date(); 

endDate.setMonth(endDate.getMonth() + 1);
startDate.setMonth(startDate.getMonth() - 2);
SimpleDateFormat df  = new SimpleDateFormat(&quot;yyyy-MM-&apos;01T00:00:00.000&apos;XXX&quot;); 

String formattedDate1 = df.format(endDate); 
String formattedDate = &quot;\&quot;&quot;+formattedDate1+&quot;\&quot;&quot;; 

String formattedDate2 = df.format(startDate); 
String formattedDate3 = &quot;\&quot;&quot;+formattedDate2+&quot;\&quot;&quot;; 

// Resulting date will be in ${FutureDate}
vars.put(&quot;startMonth4Z&quot;,formattedDate3);
vars.put(&quot;endMonth4Z&quot;,formattedDate);
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <boolProp name="com.blazemeter.jmeter.debugger.engine.Debugger">true</boolProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Get_Date JSR223 PreProcessor3" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat; 
import java.util.Date; 

// You need to define ${InDays} as how many days forward/back you want to go
int startInMonth = Integer.valueOf(vars.get(&quot;startInMonth&quot;));
int endInMonth = Integer.valueOf(vars.get(&quot;endInMonth&quot;));

Date startDate = new Date();
Date startDate91 = new Date();  
Date endDate = new Date(); 

endDate.setMonth(endDate.getMonth() + endInMonth);
startDate.setMonth(startDate.getMonth() - startInMonth);
startDate91.setMonth(startDate91.getMonth() - startInMonth);
endDate.setDate(endDate.getDate() +1); 
startDate.setDate(startDate.getDate() +1); 
startDate91.setDate(startDate91.getDate() +3); 

SimpleDateFormat df  = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T00:00:00.000&apos;XXX&quot;); 

String formattedDate1 = df.format(endDate); 
String formattedDate = &quot;\&quot;&quot;+formattedDate1+&quot;\&quot;&quot;; 

String formattedDate2 = df.format(startDate); 
String formattedDate3 = &quot;\&quot;&quot;+formattedDate2+&quot;\&quot;&quot;; 

String formattedDate4 = df.format(startDate91); 
String formattedDate5 = &quot;\&quot;&quot;+formattedDate4+&quot;\&quot;&quot;; 

// Resulting date will be in ${FutureDate}
vars.put(&quot;startMonthDateZ&quot;,formattedDate3);
vars.put(&quot;startMonthDate91Z&quot;,formattedDate5);
vars.put(&quot;endMonthDateZ&quot;,formattedDate);
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <boolProp name="com.blazemeter.jmeter.debugger.engine.Debugger">true</boolProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Get_Date JSR223 PreProcessor4" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">var itemsInterval= &quot;${__RandomFromMultipleVars(DAY|MONTH|YEAR)}&quot;;
vars.put(&quot;itemInterval&quot;,itemsInterval);

var itemsMakeBuy = [&quot;${makeBuyItems}&quot;];
var makeBuy_PATH1= itemsMakeBuy[Math.floor(Math.random() * itemsMakeBuy.length)];
vars.put(&quot;makeBuy_PATH11&quot;,&quot;intersects(procurementType, &quot;+makeBuy_PATH1+&quot;)&quot;);

var itemsMRP = [&quot;${typeMRPItems}&quot;];
var mRPType_PATH1= itemsMRP[Math.floor(Math.random() * itemsMRP.length)];
vars.put(&quot;mRPType_PATH11&quot;,&quot;intersects(latestMRPType,  &quot;+mRPType_PATH1+&quot;)&quot;);

var itemsFacility = [&quot;${facilityItems}&quot;];
var itemFacility = itemsFacility[Math.floor(Math.random() * itemsFacility.length)];
vars.put(&quot;facility_PATH11&quot;,&quot;intersects(facility.name, &quot;+itemFacility+&quot;)&quot;);

var itemsBulk = [&quot;${bulk}&quot;, &quot;${nonBulk}&quot;, &quot;${bulkNonBulk}&quot;];
var itemBulk = itemsBulk[Math.floor(Math.random() * itemsBulk.length)];
vars.put(&quot;bulkNonBulkItem11&quot;,&quot;intersects(latestBulkItems, &quot;+itemBulk+&quot;)&quot;);

var itemsClassABC = [&quot;${classABC}&quot;];
var itemClassABC = itemsClassABC[Math.floor(Math.random() * itemsClassABC.length)];
vars.put(&quot;classABC_PATH11&quot;,&quot;intersects(latestABCClass, &quot;+itemClassABC+&quot;)&quot;);

function randomInteger(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

var serviceClassStart = (Math.round(Math.random() * 5 + 1));
var serviceClassEnd = randomInteger(serviceClassStart, 6);
vars.put(&quot;serviceClass11&quot;,&quot;(itemFacilityInventoryDerivedParams.serviceClass &gt;= &quot;+serviceClassStart+&quot; &amp;&amp; itemFacilityInventoryDerivedParams.serviceClass &lt;= &quot;+serviceClassEnd+&quot;)&quot;);

var itemsReplenishType = [&quot;${replenishType}&quot;];
var itemReplenishType = itemsReplenishType[Math.floor(Math.random() * itemsReplenishType.length)];
vars.put(&quot;replenishType_PATH11&quot;,&quot;intersects(replenishmentMethod, &quot;+itemReplenishType+&quot;)&quot;);

var itemsInterval11= &quot;${__Random(1,3,)}&quot;;
vars.put(&quot;ranDom&quot;,itemsInterval11);</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
              <boolProp name="com.blazemeter.jmeter.debugger.engine.Debugger">true</boolProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Get_Date JSR223 PreProcessor5" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">vars.put(&quot;tier1Description11&quot;,&quot;intersects(productHierarchyInventoryParams.productTiersMapping.tier1Description, [\\\&quot;&quot;+vars.get(&quot;Tier1_PATH&quot;)+&quot;\\\&quot;])&quot;);
vars.put(&quot;tier2Description11&quot;,&quot;intersects(productHierarchyInventoryParams.productTiersMapping.tier2Description, [\\\&quot;&quot;+vars.get(&quot;Tier2_PATH&quot;)+&quot;\\\&quot;])&quot;);
vars.put(&quot;tier3Description11&quot;,&quot;intersects(productHierarchyInventoryParams.productTiersMapping.tier2Description, [\\\&quot;&quot;+vars.get(&quot;Tier3_PATH&quot;)+&quot;\\\&quot;])&quot;);

vars.put(&quot;extraString11&quot;,&apos;facility == \\&quot;\\&quot; &amp;&amp; itemFacilityInventoryDerivedParams.serviceClassVarianceGrouping == \\&quot;\\&quot; &amp;&amp; itemFacilityGroups.from == \\&quot;\\&quot;&apos;);
vars.put(&quot;extraString12&quot;,&apos;facility == \\&quot;\\&quot;&apos;);
vars.put(&quot;extraString13&quot;,&apos;itemFacilityInventoryDerivedParams.serviceClassVarianceGrouping == \\&quot;\\&quot;&apos;);
vars.put(&quot;extraString14&quot;,&apos;itemFacilityGroups.from == \\&quot;\\&quot;&apos;);

vars.put(&quot;latestRecomm&quot;,&apos;latestRecommendation.status == \\&quot;New\\&quot;&apos;);
vars.put(&quot;inSnoozedState&quot;,&apos;inSnoozedState == false&apos;);

vars.put(&quot;replenishmentString11&quot;,&apos;replenishmentMethod == \\&quot;SAFETY_STOCK\\&quot; &amp;&amp; itemFacilityInventoryDerivedParams.replenishmentType == \\&quot;SAFETY_STOCK\\&quot; &amp;&amp; inSnoozedState == false&apos;);
vars.put(&quot;replenishmentString11ROP&quot;,&apos;replenishmentMethod == \\&quot;REORDER_POINT\\&quot; &amp;&amp; itemFacilityInventoryDerivedParams.replenishmentType == \\&quot;REORDER_POINT\\&quot; &amp;&amp; inSnoozedState == false&apos;);



</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
              <boolProp name="com.blazemeter.jmeter.debugger.engine.Debugger">true</boolProp>
            </JSR223PreProcessor>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config1" enabled="true">
              <stringProp name="delimiter">;</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">/Users/denissaparov/Desktop/apache-jmeter-5.1.1/bin/1A_IO_BKR/dataTagAnalysisTag.csv</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">analysisTag</stringProp>
            </CSVDataSet>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config2" enabled="true">
              <stringProp name="delimiter">;</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">/Users/denissaparov/Desktop/apache-jmeter-5.1.1/bin/1A_IO_BKR/dataTagAnalysisTag1.csv</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">analysisTag1</stringProp>
            </CSVDataSet>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config3" enabled="false">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">/Users/denissaparov/Desktop/apache-jmeter-5.1.1/bin/1A_IO_BKR/dataTagQuantities.csv</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">Quantities</stringProp>
            </CSVDataSet>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config4" enabled="false">
              <stringProp name="delimiter">;</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">/Users/denissaparov/Desktop/apache-jmeter-5.1.1/bin/1A_IO_BKR/dataTagRe-Order.csv</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">Re-Order</stringProp>
            </CSVDataSet>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Confi5" enabled="true">
              <stringProp name="delimiter">;</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">/Users/denissaparov/Desktop/apache-jmeter-5.1.1/bin/1A_IO_BKR/dataTagAnalysisFiltr.csv</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">itemFiltr</stringProp>
            </CSVDataSet>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config6" enabled="true">
              <stringProp name="delimiter">;</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">/Users/denissaparov/Desktop/apache-jmeter-5.1.1/bin/1A_IO_BKR/dataTagAnalysisComb.csv</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">itemComb</stringProp>
            </CSVDataSet>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>true</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ThreadsStateOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Active Threads Over Time" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <longProp name="interval_grouping">500</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ResponseTimesOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Times Over Time" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <longProp name="interval_grouping">500</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
        <kg.apc.jmeter.reporters.ConsoleStatusLogger guiclass="kg.apc.jmeter.reporters.ConsoleStatusLoggerGui" testclass="kg.apc.jmeter.reporters.ConsoleStatusLogger" testname="jp@gc - Console Status Logger" enabled="true"/>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
